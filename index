<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, maximum-scale=1.0">
    <title>ICTEX Trade - Trading Simulator</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <!-- Firebase SDK Scripts -->
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-database.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-storage.js"></script>
    <style>
        :root {
            --bg-color: #131722; --primary-surface: #1e222d; --secondary-surface: #2a2e39;
            --text-primary: #d1d4dc; --text-secondary: #8a8e97;
            --color-up: #00C853; --color-down: #D50000; --color-accent: #2962ff;
            --color-green-accent: #00C853;
            --color-golden: #FFC107; --color-purple: #9C27B0;
            --border-color: #363a45;
            --color-pending: #ff9800; /* Orange for pending */
            --color-rank-1: #ffd700;
            --color-rank-2: #c0c0c0;
            --color-rank-3: #cd7f32;
        }
        * { box-sizing: border-box; }
        button, a, input, select, div[onclick] { -webkit-tap-highlight-color: transparent; }
        button:focus, button:active,
        a:focus, a:active,
        div[onclick]:focus, div[onclick]:active {
          outline: none !important;
          -webkit-box-shadow: none !important;
          box-shadow: none !important;
        }
        html, body { height: 100%; margin: 0; overflow: hidden; }
        body { font-family: 'Roboto', sans-serif; background-color: var(--bg-color); color: var(--text-primary); display: flex; justify-content: center; align-items: center; }
        #app-loader { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: #131722; z-index: 9999; display: flex; justify-content: center; align-items: center; transition: opacity 0.3s ease; }
        #app-loader img { width: 120px; animation: pulse 1.5s infinite ease-in-out; }
        @keyframes pulse { 0%, 100% { transform: scale(1); opacity: 1; } 50% { transform: scale(1.05); opacity: 0.8; } }
        #auth-container { width: 100%; max-width: 420px; height: 100%; display: none; flex-direction: column; justify-content: center; padding: 20px; overflow: hidden; position: relative; }
        .auth-form-wrapper { width: 100%; position: absolute; left: 0; padding: 0 20px; transition: transform 0.5s cubic-bezier(0.25, 1, 0.5, 1), opacity 0.5s; }
        .auth-form-wrapper:not(.active) { transform: translateX(100%); opacity: 0; pointer-events: none; }
        .auth-form-wrapper.left-out { transform: translateX(-100%); opacity: 0; }
        .auth-form-wrapper.active { transform: translateX(0); opacity: 1; }
        .auth-form { background: var(--primary-surface); padding: 30px 25px; border-radius: 12px; display: flex; flex-direction: column; gap: 20px; }
        .auth-logo { width: 100px; height: 100px; object-fit: contain; margin: 0 auto 5px; border-radius: 20px; animation: logo-fade-in 0.6s cubic-bezier(0.25, 1, 0.5, 1); }
        .auth-form h2 { color: var(--text-primary); text-align: center; margin: 0 0 15px 0; font-size: 1.8rem; font-weight: 700; }
        .input-group { position: relative; }
        .auth-input { width: 100%; background: var(--bg-color); border: 1px solid var(--border-color); border-radius: 8px; padding: 15px; font-size: 1rem; color: var(--text-primary); transition: border-color 0.2s; }
        .auth-input:focus { border-color: var(--color-accent); outline: none; }
        .auth-button { background: linear-gradient(45deg, var(--color-accent), #448aff); color: white; border: none; padding: 15px; border-radius: 8px; font-size: 1.1rem; font-weight: 700; cursor: pointer; transition: filter 0.2s ease-in-out; }
        .auth-button:hover { filter: brightness(1.1); }
        .form-toggle { text-align: center; color: var(--text-secondary); font-size: 0.9rem; }
        .form-toggle a { color: var(--color-accent); font-weight: 500; cursor: pointer; text-decoration: none; }
        .auth-extra-links { display: flex; justify-content: space-between; align-items: center; font-size: 0.9rem; padding: 0 5px; }
        .auth-extra-links a { color: var(--color-accent); font-weight: 500; cursor: pointer; text-decoration: none; }
        .auth-loader { display: none; border: 4px solid var(--secondary-surface); border-top: 4px solid var(--color-accent); border-radius: 50%; width: 30px; height: 30px; animation: spin 1s linear infinite; margin: 20px auto 0; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        @keyframes logo-fade-in { from { opacity: 0; transform: scale(0.9); } to { opacity: 1; transform: scale(1); } }
        #main-app-wrapper { width: 100%; max-width: 420px; height: 100%; display: none; }
        .app-container { width: 100%; height: 100%; display: flex; flex-direction: column; background-color: var(--primary-surface); transition: opacity 0.3s; }
        main { display: flex; flex-direction: column; flex-grow: 1; overflow: hidden; }
        .app-header { display: flex; justify-content: space-between; align-items: center; padding: 10px 15px; background-color: var(--primary-surface); border-bottom: 1px solid var(--border-color); flex-shrink: 0; }
        .app-logo { height: 30px; }
        .app-branding { display: flex; align-items: center; gap: 8px; }
        .app-name-text { font-size: 1.1rem; font-weight: 700; color: var(--text-primary); }
        #header-balance-container { background-color: var(--secondary-surface); padding: 5px 12px; border-radius: 20px; display: flex; align-items: center; gap: 6px; }
        #balance-icon { width: 20px; height: 20px; display: flex; align-items: center; justify-content: center; }
        #balance-icon svg { width: 100%; height: 100%; }
        #balance-live-text { font-size: 0.8rem; font-weight: 700; letter-spacing: 0.5px; }
        #balance-amount { font-size: 0.95rem; font-weight: 500; color: var(--text-primary); }
        .balance-tier-1 #balance-live-text { color: var(--color-up); } .balance-tier-1 #balance-icon { color: var(--color-up); }
        .balance-tier-2 #balance-live-text { color: var(--color-golden); } .balance-tier-2 #balance-icon { color: var(--color-golden); }
        .balance-tier-3 #balance-live-text { color: var(--color-purple); } .balance-tier-3 #balance-icon { color: var(--color-purple); }
        .view { display: none; flex-direction: column; flex-grow: 1; height: 100%; }
        .view.active { display: flex; }
        .chart-section { position: relative; width: 100%; flex-grow: 1; }
        #chart-canvas { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: var(--bg-color); cursor: grab; }
        #chart-canvas:active { cursor: grabbing; }
        .chart-top-bar { position: absolute; top: 10px; left: 10px; z-index: 20; display: flex; gap: 8px; align-items: center; }
        #chart-timeframe-btn { background: rgba(42,46,57,0.8); padding: 5px 10px; border-radius: 5px; font-size: 0.8rem; border: none; color: var(--text-primary); cursor: pointer; font-weight: 500; }
        #live-clock { background: rgba(42,46,57,0.8); padding: 5px 10px; border-radius: 5px; font-size: 0.8rem; color: var(--text-secondary); font-weight: 500; }
        
        .controls-section { padding: 15px; background-color: var(--primary-surface); flex-shrink: 0; border-top: 1px solid var(--border-color); display: flex; flex-direction: column; gap: 15px; }
        .inputs-row { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; }
        .control-box { display: flex; flex-direction: column; gap: 8px; }
        .control-box label { color: var(--text-secondary); font-size: 0.8rem; padding-left: 5px; }
        #bet-expiry-btn { height: 48px; display: flex; align-items: center; justify-content: center; background-color: var(--bg-color); border-radius: 8px; font-size: 1.2rem; font-weight: 700; color: var(--text-primary); cursor: pointer; }
        .investment-wrapper { height: 48px; display: flex; align-items: center; background-color: var(--bg-color); border-radius: 8px; padding: 0 8px; justify-content: space-between; }
        #amount-display { flex-grow: 1; font-size: 1.2rem; font-weight: 700; color: var(--text-primary); text-align: center; cursor: pointer; }
        .invest-btn { background-color: var(--secondary-surface); color: var(--text-primary); border: none; border-radius: 50%; width: 32px; height: 32px; font-size: 1.5rem; line-height: 1; cursor: pointer; display: flex; align-items: center; justify-content: center; flex-shrink: 0; }
        .payout-info { text-align: center; color: var(--text-secondary); font-weight: 500; font-size: 0.9rem; }
        .action-buttons { display: flex; gap: 10px; }
        .btn { flex: 1; padding: 15px; border: none; border-radius: 8px; font-size: 1.1rem; font-weight: 700; color: #fff; cursor: pointer; transition: all 0.2s ease; display: flex; align-items: center; justify-content: center; gap: 10px; position: relative; overflow: hidden; }
        .btn span { position: relative; z-index: 1; }
        .btn::after { content: ''; position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-repeat: no-repeat; background-position: 50% 50%; background-size: 150%; opacity: 0.15; z-index: 0; transition: opacity 0.3s ease; }
        .btn:hover::after { opacity: 0.25; }
        .btn-up::after { background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3e%3cpath d='M0 80 L20 60 L40 70 L60 40 L80 50 L100 30' stroke='white' stroke-width='6' fill='none' vector-effect='non-scaling-stroke'/%3e%3c/svg%3e"); }
        .btn-down::after { background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3e%3cpath d='M0 30 L20 50 L40 40 L60 70 L80 60 L100 80' stroke='white' stroke-width='6' fill='none' vector-effect='non-scaling-stroke'/%3e%3c/svg%3e"); }
        .btn-icon { width: 24px; height: 24px; }
        .btn-up { background: linear-gradient(45deg, var(--color-up), #43e07b); }
        .btn-down { background-color: var(--color-down); }
        .btn:disabled { background-color: #333 !important; background-image: none; color: #777; cursor: not-allowed; }

        .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.6); backdrop-filter: blur(5px); display: flex; align-items: center; justify-content: center; z-index: 1001; opacity: 0; pointer-events: none; transition: opacity 0.3s ease; }
        .modal-overlay.visible { opacity: 1; pointer-events: auto; }
        .modal-content { background: var(--primary-surface); padding: 20px; border-radius: 12px; width: 90%; max-width: 350px; display: flex; flex-direction: column; gap: 15px; }
        .modal-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; }
        .time-option { background-color: var(--secondary-surface); color: var(--text-primary); border: none; border-radius: 8px; padding: 12px; font-size: 0.9rem; width: 100%; cursor: pointer; text-align: center; font-weight: 500;}
        #notification { position: fixed; top: 20px; left: 50%; transform: translateX(-50%) translateY(-50px); padding: 10px 20px; border-radius: 8px; color: white; font-weight: 500; font-size: 0.9rem; z-index: 2000; opacity: 0; transition: opacity 0.4s, transform 0.4s cubic-bezier(0.25, 1, 0.5, 1); pointer-events: none; text-align: center; min-width: 250px; }
        #notification.show { opacity: 1; transform: translateX(-50%) translateY(0); }
        #notification.win { background-color: var(--color-up); } #notification.loss { background-color: var(--color-down); } #notification.info { background-color: var(--color-accent); }
        .app-nav { display: flex; background-color: var(--primary-surface); border-top: 1px solid var(--border-color); flex-shrink: 0; }
        .nav-btn { flex: 1; padding: 10px 5px; background: none; border: none; color: var(--text-secondary); cursor: pointer; transition: color 0.2s, background-color 0.2s; border-top: 3px solid transparent; display: flex; align-items: center; justify-content: center; }
        .nav-btn svg { width: 26px; height: 26px; }
        .nav-btn:hover { color: var(--text-primary); }
        .nav-btn.active { color: var(--color-accent); border-top-color: var(--color-accent); }
        .page-content { overflow-y: auto; overflow-x: hidden; padding: 20px; flex-grow: 1; background-color: var(--bg-color); }
        .page-content h2 { text-align: center; margin-top: 10px; margin-bottom: 20px; }
        .page-content h3 { font-weight: 500; margin-bottom: 15px; color: var(--text-primary); }
        .page-content p { text-align: center; color: var(--text-secondary); }
        .history-item { background-color: var(--secondary-surface); padding: 12px 15px; margin-bottom: 10px; border-radius: 8px; display: grid; grid-template-columns: 1fr auto; gap: 10px; font-size: 0.9rem; align-items: center; }
        .hi-left { display: flex; flex-direction: column; gap: 8px; }
        .hi-top-row { display: flex; align-items: center; gap: 8px; }
        .hi-direction { font-weight: 700; font-size: 1rem; padding: 2px 8px; border-radius: 4px; color: #fff; }
        .hi-direction-up { background-color: var(--color-up); } .hi-direction-down { background-color: var(--color-down); }
        .hi-asset { font-weight: 500; }
        .hi-bottom-row { font-size: 0.8rem; color: var(--text-secondary); }
        .hi-prices { display: flex; gap: 15px; } .hi-prices span { color: var(--text-primary); }
        .hi-right { text-align: right; }
        .hi-result { font-weight: 700; font-size: 1.1rem; margin-bottom: 4px; }
        .hi-result-win { color: var(--color-up); } .hi-result-loss { color: var(--color-down); } .hi-result-push { color: var(--text-secondary); }
        .hi-payout { font-size: 0.9rem; color: var(--text-secondary); } .hi-payout-val { font-weight: 500; }
        .logout-button { display: block; width: 80%; margin: 40px auto; padding: 15px; background-color: var(--color-down); color: white; border: none; border-radius: 8px; font-size: 1rem; font-weight: 700; cursor: pointer; }
        .profile-header { text-align: center; margin-bottom: 25px; }
        .profile-pic-container { position: relative; width: 90px; height: 90px; margin: 0 auto 15px auto; }
        .profile-pic-label { display: block; width: 100%; height: 100%; border-radius: 50%; overflow: hidden; position: relative; background-color: var(--secondary-surface); }
        #profile-pic-img { width: 100%; height: 100%; object-fit: cover; }
        .profile-pic { width: 100%; height: 100%; border-radius: 50%; background: var(--secondary-surface); display: flex; align-items: center; justify-content: center; color: var(--text-secondary); font-size: 2rem; }
        .profile-pic svg { width: 50px; height: 50px; }
        #profile-info-email { font-size: 1rem; font-weight: 500; }
        #profile-info-id { font-size: 0.85rem; color: var(--text-secondary); margin-top: 4px; }
        #profile-verified-status { font-weight: 700; margin-top: 8px; display: inline-flex; align-items: center; gap: 6px; padding: 4px 10px; border-radius: 15px; font-size: 0.8rem; }
        #profile-verified-status.verified { background-color: rgba(0, 200, 83, 0.2); color: var(--color-up); }
        #profile-verified-status.unverified { background-color: rgba(213, 0, 0, 0.2); color: var(--color-down); }
        .page-form { display: flex; flex-direction: column; gap: 15px; }
        .form-input-group label { display: block; color: var(--text-secondary); font-size: 0.8rem; margin-bottom: 5px; }
        .form-input { width: 100%; background: var(--bg-color); border: 1px solid var(--border-color); border-radius: 8px; padding: 12px; font-size: 1rem; color: var(--text-primary); }
        #manual-amount-input:focus { border-color: var(--color-accent); outline: none; box-shadow: none !important; -webkit-box-shadow: none !important; }
        .form-input:disabled { background-color: var(--secondary-surface); cursor: not-allowed; color: var(--text-secondary); }
        .email-verify-group { display: flex; align-items: center; }
        #email-verify-status { margin-left: 10px; font-weight: 500; font-size: 0.9rem; }
        #email-verify-status.verified { color: var(--color-up); }
        #email-verify-status.unverified { color: var(--color-pending); cursor: pointer; text-decoration: underline; }
        .save-button { background-color: var(--color-accent); color: white; border: none; padding: 15px; border-radius: 8px; font-size: 1rem; font-weight: 700; cursor: pointer; margin-top: 10px; }
        .save-button:disabled { background: #555; cursor: not-allowed; }
        .green-button { background: linear-gradient(45deg, var(--color-green-accent), #00e676); font-size: 1.1rem; font-weight: 700; }
        .settings-link { background: var(--secondary-surface); padding: 15px; border-radius: 8px; color: var(--text-primary); text-decoration: none; display: flex; justify-content: space-between; align-items: center; font-weight: 500; }
        .settings-link:hover { background: #363a45; }
        .status-badge { font-size: 0.8rem; font-weight: 700; padding: 4px 10px; border-radius: 12px; }
        .status-verified { background-color: var(--color-up); color: white; }
        .status-pending { background-color: var(--color-pending); color: white; }
        .status-unverified { background-color: var(--color-down); color: white; }
        #kyc-nid-group { display: none; }
        .kyc-form .form-input-group { background: var(--secondary-surface); padding: 15px; border-radius: 10px; }
        .settings-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px; padding: 0 10px; }
        .settings-grid-item { background: var(--primary-surface); border-radius: 12px; padding: 20px 15px; text-align: center; color: var(--text-primary); text-decoration: none; display: flex; flex-direction: column; align-items: center; justify-content: center; gap: 10px; transition: background-color 0.2s; }
        .settings-grid-item:hover { background-color: var(--secondary-surface); }
        .settings-grid-item svg { width: 32px; height: 32px; color: var(--color-accent); }
        .settings-grid-item span { font-weight: 500; font-size: 0.9rem; }
        .page-header { display: flex; align-items: center; justify-content: space-between; padding: 15px; border-bottom: 1px solid var(--border-color); background-color: var(--primary-surface); flex-shrink: 0; }
        .back-btn { background: none; border: none; color: var(--text-primary); cursor: pointer; padding: 5px; }
        .back-btn svg { width: 24px; height: 24px; }
        .page-header h2 { flex-grow: 1; text-align: center; margin: 0; font-size: 1.2rem; }
        .header-icon-btn { background: none; border: none; color: var(--text-secondary); cursor: pointer; padding: 5px; width: 34px; height: 34px; }
        #view-leaderboard .page-header h2 { margin-left: 34px; }
        
        /* --- PREMIUM DEPOSIT & PAYMENT STYLES --- */
        .deposit-card-new { background-color: var(--primary-surface); padding: 20px; border-radius: 12px; margin-bottom: 20px; }
        .deposit-card-new > label { color: var(--text-secondary); font-size: 0.9rem; font-weight: 500; margin-bottom: 15px; display: block; }
        .deposit-amount-display { display: flex; align-items: center; gap: 10px; border-bottom: 2px solid var(--color-green-accent); padding-bottom: 10px; margin-bottom: 10px; }
        .dollar-sign { font-size: 2.5rem; font-weight: 700; color: var(--text-secondary); }
        #deposit-amount-usd-new { font-size: 2.5rem; font-weight: 700; color: var(--text-primary); background: none; border: none; flex-grow: 1; min-width: 0; padding: 0; }
        #deposit-amount-usd-new:focus { outline: none; }
        #deposit-amount-usd-new::placeholder { color: var(--text-secondary); font-weight: 500; }
        .quick-amount-buttons-new { display: grid; grid-template-columns: repeat(4, 1fr); gap: 10px; }
        .quick-amount-btn-new { background-color: var(--secondary-surface); border: 1px solid var(--border-color); color: var(--text-primary); padding: 10px; border-radius: 20px; cursor: pointer; text-align: center; font-weight: 500; transition: all 0.2s ease; }
        .quick-amount-btn-new:hover, .quick-amount-btn-new.active { background-color: var(--color-green-accent); border-color: var(--color-green-accent); color: white; }
        .promo-code-wrapper-new { display: flex; gap: 10px; align-items: stretch; }
        #promo-code-new { flex-grow: 1; background-color: var(--bg-color); border: 1px solid var(--border-color); border-radius: 8px; padding: 12px; color: var(--text-primary); min-width: 0; }
        #promo-code-new:focus { border-color: var(--color-golden); }
        #apply-promo-btn-new { background-color: var(--color-golden); color: var(--bg-color); border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-weight: 700; transition: background-color 0.2s; flex-shrink: 0; }
        #apply-promo-btn-new:disabled { background-color: var(--text-secondary); cursor: not-allowed;}
        .promo-feedback { font-size: 0.85rem; font-weight: 500; margin-top: 10px; padding: 8px 12px; border-radius: 6px; text-align: center; display: none; }
        .promo-feedback.visible { display: block; }
        .promo-feedback.success { background-color: rgba(0, 200, 83, 0.2); color: var(--color-up); }
        .promo-feedback.error { background-color: rgba(213, 0, 0, 0.2); color: var(--color-down); }
        #promo-calculation-display { font-size: 0.9rem; font-weight: 500; margin-top: 12px; text-align: center; color: var(--text-primary); }
        #deposit-next-btn-new { display: block; width: 100%; margin-top: 10px; background: var(--color-green-accent); color: white; border: none; padding: 16px; border-radius: 8px; font-size: 1.1rem; font-weight: 700; cursor: pointer; }
        #payment-method-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px; }
        .payment-method-item { background: var(--primary-surface); border: 2px solid var(--border-color); border-radius: 12px; padding: 20px; display: flex; flex-direction: column; align-items: center; justify-content: center; gap: 12px; cursor: pointer; transition: all 0.2s ease-in-out; position: relative; text-decoration: none; color: var(--text-primary); }
        .payment-method-item:hover { border-color: var(--text-primary); }
        .payment-method-item.selected { border-color: var(--color-green-accent); }
        .payment-method-item.maintenance, .payment-method-item.coming-soon { opacity: 0.5; cursor: not-allowed; }
        .payment-method-item.maintenance:hover, .payment-method-item.coming-soon:hover { border-color: var(--border-color); }
        .pm-status-badge { position: absolute; top: 8px; right: 8px; font-size: 0.7rem; font-weight: 700; padding: 3px 8px; border-radius: 10px; color: white; text-transform: capitalize; }
        .pm-status-maintenance { background-color: var(--color-pending); }
        .pm-status-coming-soon { background-color: var(--color-accent); }
        .payment-method-item img { width: 50px; height: 50px; border-radius: 8px; object-fit: contain; }
        .payment-method-item span { font-weight: 500; }
        .deposit-timer-card { background: var(--secondary-surface); padding: 15px; border-radius: 12px; margin-bottom: 20px; text-align: center; }
        .timer-label { font-size: 0.9rem; color: var(--text-secondary); margin-bottom: 5px; }
        #deposit-timer-display { font-size: 2rem; font-weight: 700; color: var(--color-golden); letter-spacing: 2px; }
        .payment-instructions-card { background-color: rgba(41, 98, 255, 0.1); border: 1px solid var(--color-accent); color: var(--text-primary); padding: 15px; border-radius: 12px; margin-bottom: 20px; font-size: 0.9rem; line-height: 1.5; }
        .payment-details-card { background-color: var(--primary-surface); padding: 10px 20px; border-radius: 12px; margin-bottom: 20px; display: flex; flex-direction: column; gap: 0; }
        .payment-details-row { display: flex; justify-content: space-between; align-items: center; font-size: 0.95rem; padding: 14px 0; border-bottom: 1px solid var(--border-color); }
        .payment-details-card .payment-details-row:last-child { border-bottom: none; }
        .payment-details-row .label { color: var(--text-secondary); }
        .payment-details-row .value { font-weight: 700; color: var(--text-primary); }
        .payment-details-row .value.highlight { color: var(--color-green-accent); font-size: 1.1rem; }
        .payment-address-row-new { background-color: var(--secondary-surface); padding: 15px; border-radius: 10px; display: flex; justify-content: space-between; align-items: center; margin-top: 15px; }
        .address-labels-new { color: var(--text-secondary); font-size: 0.9rem; flex-shrink: 0; display: flex; flex-direction: column; line-height: 1.4; }
        .address-labels-new span:first-child { font-weight: 700; color: var(--text-primary); }
        .address-value-wrapper-new { display: flex; gap: 10px; align-items: center; flex-grow: 1; justify-content: flex-end; margin-left: 15px; }
        .address-text-new { word-break: break-all; text-align: right; font-weight: 500; font-size: 0.95rem; color: var(--text-primary); }
        .copy-button-new { background: var(--color-green-accent); border-radius: 6px; color: white; padding: 8px; cursor: pointer; display: flex; align-items: center; justify-content: center; flex-shrink: 0; border: none; transition: opacity 0.2s; }
        .copy-button-new:hover { opacity: 0.8; }
        .copy-button-new svg { width: 18px; height: 18px; }
        .deposit-qr-code { display: block; width: 180px; height: 180px; margin: 20px auto; border-radius: 12px; background-color: white; padding: 5px; }
        .proof-upload-label { background: var(--secondary-surface); border: 2px dashed var(--border-color); padding: 30px; text-align: center; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; gap: 10px; transition: all 0.2s ease; }
        .proof-upload-label:hover { border-color: var(--color-green-accent); background-color: var(--bg-color); }
        .proof-upload-label svg { width: 32px; height: 32px; color: var(--text-secondary); transition: color 0.2s; }
        .proof-upload-label:hover svg { color: var(--color-green-accent); }
        .proof-upload-label span { color: var(--text-primary); font-weight: 500; }
        .proof-upload-label .file-name { font-size: 0.8rem; color: var(--color-green-accent); }
        #payment-submit-btn-new { display: block; width: 100%; margin-top: 10px; background: var(--color-green-accent); color: white; border: none; padding: 16px; border-radius: 8px; font-size: 1.1rem; font-weight: 700; cursor: pointer; transition: background-color 0.2s; }
        #payment-submit-btn-new:disabled { background: var(--text-secondary); cursor: not-allowed; }
        input[type="file"] { display: none; }
        .file-name { color: var(--text-secondary); font-size: 0.85rem; margin-top: 5px; }
        #kyc-submit-button:disabled { background-color: #555; cursor: not-allowed; }
        .kyc-info-box { background-color: var(--secondary-surface); padding: 15px; border-radius: 8px; margin-bottom: 20px; }
        .kyc-info-box p { margin: 0; text-align: left; line-height: 1.5; }
        .withdraw-info-cards { display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; margin-bottom: 20px; }
        .withdraw-info-card { background-color: var(--primary-surface); padding: 15px; border-radius: 8px; text-align: center; }
        .withdraw-info-card .label { font-size: 0.8rem; color: var(--text-secondary); margin-bottom: 5px; }
        .withdraw-info-card .value { font-size: 1.1rem; font-weight: 700; }
        .custom-select { background-color: var(--bg-color); border: 1px solid var(--border-color); border-radius: 8px; padding: 12px; font-size: 1rem; color: var(--text-primary); cursor: pointer; display: flex; justify-content: space-between; align-items: center; }
        .custom-select::after { content: '▼'; font-size: 0.7rem; color: var(--text-secondary); }
        .method-option-list { display: flex; flex-direction: column; gap: 5px; }
        .method-option { display: flex; align-items: center; justify-content: space-between; padding: 15px; background: var(--secondary-surface); border-radius: 8px; cursor: pointer; }
        .method-option .method-info { display: flex; align-items: center; gap: 12px; }
        .method-option .method-info span { font-weight: 500; }
        .method-option input[type="radio"] { display: none; }
        .method-option .radio-circle { width: 20px; height: 20px; border-radius: 50%; border: 2px solid var(--border-color); display: flex; justify-content: center; align-items: center; transition: border-color 0.2s; }
        .method-option:hover .radio-circle { border-color: var(--text-primary); }
        .method-option input[type="radio"]:checked ~ .radio-circle { border-color: var(--color-accent); }
        .method-option input[type="radio"]:checked ~ .radio-circle::after { content: ''; width: 10px; height: 10px; background: var(--color-accent); border-radius: 50%; }
        #transaction-list-container { padding: 0; display: flex; flex-direction: column; gap: 10px; }
        .transaction-item { background-color: var(--primary-surface); padding: 15px; border-radius: 10px; display: flex; justify-content: space-between; align-items: center; }
        .ti-left { display: flex; flex-direction: column; gap: 6px; }
        .ti-order-id { font-weight: 500; font-size: 1rem; }
        .ti-date { font-size: 0.8rem; color: var(--text-secondary); }
        .ti-status { font-weight: 700; font-size: 0.85rem; text-transform: capitalize; }
        .ti-status-succeeded { color: var(--color-up); } .ti-status-pending { color: var(--color-pending); } .ti-status-failed { color: var(--color-down); }
        .ti-right { text-align: right; }
        .ti-amount { font-size: 1.1rem; font-weight: 700; margin-bottom: 6px; }
        .ti-amount-positive { color: var(--color-up); } .ti-amount-negative { color: var(--color-down); }
        .ti-details { color: var(--text-secondary); font-size: 0.8rem; } .ti-type { text-transform: capitalize; }
        .analysis-filters { display: flex; justify-content: center; gap: 10px; margin-bottom: 20px; }
        .filter-btn { background: var(--secondary-surface); color: var(--text-secondary); border: 1px solid var(--border-color); padding: 8px 15px; border-radius: 20px; font-size: 0.85rem; cursor: pointer; transition: all 0.2s; }
        .filter-btn.active { background: var(--color-accent); color: white; border-color: var(--color-accent); }
        .analysis-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 0 10px; }
        .stat-card { background: var(--primary-surface); padding: 15px; border-radius: 12px; text-align: center; }
        .stat-card-title { font-size: 0.8rem; color: var(--text-secondary); margin-bottom: 8px; text-transform: uppercase; }
        .stat-card-value { font-size: 1.5rem; font-weight: 700; }
        .stat-card-value.profit { color: var(--color-up); } .stat-card-value.loss { color: var(--color-down); }
        #withdraw-fee-info { display: none; }
    
        /* --- LEADERBOARD STYLES --- */
        #leaderboard-loader { display: flex; flex-grow: 1; align-items: center; justify-content: center; }
        #leaderboard-loader img { width: 80px; animation: pulse 1.5s infinite ease-in-out; }
        #leaderboard-content { display: none; }
        #leaderboard-my-rank { background: linear-gradient(45deg, var(--primary-surface), var(--secondary-surface)); border: 1px solid var(--border-color); padding: 15px 20px; margin: 0 15px 20px 15px; border-radius: 12px; display: grid; grid-template-columns: 40px 1fr auto; align-items: center; gap: 15px; }
        .lb-pfp { width: 40px; height: 40px; border-radius: 50%; background-color: var(--secondary-surface); display: flex; align-items: center; justify-content: center; overflow: hidden; }
        .lb-pfp img, .lb-pfp svg { width: 100%; height: 100%; object-fit: cover; }
        #leaderboard-my-rank .lb-info { flex-grow: 1; }
        #leaderboard-my-rank .lb-name { font-size: 1.1rem; font-weight: 700; color: var(--text-primary); text-align: left; }
        #leaderboard-my-rank .lb-name.rank-1 { color: var(--color-rank-1); }
        #leaderboard-my-rank .lb-name.rank-2 { color: var(--color-rank-2); }
        #leaderboard-my-rank .lb-name.rank-3 { color: var(--color-rank-3); }
        #leaderboard-my-rank .lb-position { font-size: 0.85rem; color: var(--text-secondary); }
        #leaderboard-my-rank .lb-profit, .lb-profit { font-weight: 700; font-size: 1rem; color: var(--color-up); text-align: right; }
        #leaderboard-my-rank .lb-profit { font-size: 1.1rem; }
        .leaderboard-item { display: flex; justify-content: space-between; align-items: center; padding: 16px 20px; cursor: pointer; transition: background-color 0.2s ease; }
        .leaderboard-item:hover { background-color: var(--secondary-surface); }
        #leaderboard-list .leaderboard-item:not(:last-child) { border-bottom: 1px solid var(--border-color); }
        .lb-info-block { display: flex; align-items: center; gap: 20px; }
        .lb-rank { font-size: 1rem; font-weight: 700; color: var(--text-secondary); width: 25px; text-align: left;}
        .lb-name { font-weight: 500; font-size: 1rem; color: var(--text-primary); }
        .lb-rank-1, .lb-name-1 { color: var(--color-rank-1) !important; }
        .lb-rank-2, .lb-name-2 { color: var(--color-rank-2) !important; }
        .lb-rank-3, .lb-name-3 { color: var(--color-rank-3) !important; }
        .lb-rank-1 { font-size: 1.2rem !important; }
        .lb-rank-2 { font-size: 1.1rem !important; }
        #leaderboard-help-modal h3 { text-align: center; margin: 0; font-size: 1.5rem; }
        #leaderboard-help-modal .modal-content { gap: 25px; }
        .lb-help-icon { width: 50px; height: 50px; margin: 0 auto -15px auto; background-color: var(--color-golden); border-radius: 8px; padding: 10px; color: var(--bg-color); }
        .lb-help-rules { list-style: none; padding-left: 0; margin: 0; }
        .lb-help-rules li { padding-left: 25px; position: relative; color: var(--text-secondary); font-size: 0.95rem; line-height: 1.5; }
        .lb-help-rules li:not(:last-child) { margin-bottom: 12px; }
        .lb-help-rules li::before { content: '•'; position: absolute; left: 5px; color: var(--color-accent); font-weight: bold; font-size: 1.2rem; line-height: 1; }
        #lb-help-my-rating { border-top: 1px solid var(--border-color); padding-top: 20px; }
        #leaderboard-help-my-rank-display { padding: 0 !important; }
        .modal-button-row { display: flex; gap: 10px; margin-top: 10px; }
        .modal-button { flex: 1; padding: 12px; border-radius: 8px; border: none; font-weight: 700; font-size: 1rem; cursor: pointer; }
        .modal-button.primary { background-color: var(--color-accent); color: white; }
        .modal-button.secondary { background-color: var(--secondary-surface); color: var(--text-primary); }
        #leaderboard-user-profile-modal .modal-content { max-width: 360px; padding: 0; background: var(--secondary-surface); }
        .lb-user-profile-header { display: flex; align-items: center; gap: 15px; padding: 20px; background: var(--primary-surface); border-bottom: 1px solid var(--border-color); border-radius: 12px 12px 0 0;}
        #lb-user-profile-pic { width: 60px; height: 60px; border-radius: 50%; background-color: var(--bg-color); }
        #lb-user-profile-pic img { width: 100%; height: 100%; object-fit: cover; }
        #lb-user-profile-name { font-size: 1.3rem; font-weight: 700; color: var(--text-primary); }
        .lb-user-profile-body { padding: 20px; display: flex; flex-direction: column; gap: 20px; }
        .lb-user-stats-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; }
        .lb-user-stat { background: var(--primary-surface); padding: 12px; border-radius: 8px; text-align: center; }
        .lb-user-stat-label { font-size: 0.8rem; color: var(--text-secondary); margin-bottom: 6px; text-transform: uppercase; }
        .lb-user-stat-value { font-size: 1.2rem; font-weight: 700; }
        .lb-user-stat-value.win { color: var(--color-up); }
        .lb-user-stat-value.loss { color: var(--color-down); }
        .lb-user-bio { background: var(--primary-surface); padding: 15px; border-radius: 8px; }
        .lb-user-bio h4 { margin: 0 0 10px; font-size: 1rem; font-weight: 500; color: var(--text-primary); }
        #lb-user-bio-text { font-size: 0.9rem; color: var(--text-secondary); line-height: 1.5; font-style: italic; }
        #lb-user-profile-close-btn { background-color: var(--color-accent); color: white; border: none; padding: 12px; border-radius: 8px; font-size: 1rem; font-weight: 700; cursor: pointer; margin: 0 20px 20px 20px; }

        /* Mentor Page Styles */
        .mentor-benefits-list { list-style: none; padding-left: 0; margin: 25px 0; }
        .mentor-benefits-list li {
            background-color: var(--primary-surface);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 15px;
            font-weight: 500;
        }
        .mentor-benefits-list li svg {
            width: 24px;
            height: 24px;
            color: var(--color-green-accent);
            flex-shrink: 0;
        }
        .join-mentor-btn {
            display: block;
            width: 100%;
            padding: 16px;
            border: none;
            border-radius: 8px;
            background: linear-gradient(45deg, var(--color-accent), #448aff);
            color: white;
            font-size: 1.1rem;
            font-weight: 700;
            text-align: center;
            text-decoration: none;
            cursor: pointer;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    
    <div id="app-loader">
        <img src="https://firebasestorage.googleapis.com/v0/b/viptask-5c1fc.appspot.com/o/1753379115046.png?alt=media&token=40be4566-6318-4d6a-83ad-a2b4d0afe1c3" alt="Loading...">
    </div>

    <!-- AUTHENTICATION CONTAINER -->
    <div id="auth-container">
        <!-- LOGIN FORM -->
        <div id="login-form-wrapper" class="auth-form-wrapper active">
            <form id="login-form" class="auth-form">
                <img src="https://firebasestorage.googleapis.com/v0/b/viptask-5c1fc.appspot.com/o/1753379115046.png?alt=media&token=40be4566-6318-4d6a-83ad-a2b4d0afe1c3" alt="ICTEX Trade Logo" class="auth-logo">
                <h2>Welcome Back</h2>
                <div class="input-group"> <input type="email" id="login-email" class="auth-input" placeholder="Email" required> </div>
                <div class="input-group"> <input type="password" id="login-password" class="auth-input" placeholder="Password" required> </div>
                <div class="auth-extra-links">
                    <a id="show-reset-password">Forgot Password?</a>
                </div>
                <button type="submit" class="auth-button">Login</button>
                <p class="form-toggle"> Don't have an account? <a id="show-register">Sign Up</a> </p>
            </form>
            <div id="login-loader" class="auth-loader"></div>
        </div>

        <!-- REGISTER FORM -->
        <div id="register-form-wrapper" class="auth-form-wrapper">
            <form id="register-form" class="auth-form">
                <img src="https://firebasestorage.googleapis.com/v0/b/viptask-5c1fc.appspot.com/o/1753379115046.png?alt=media&token=40be4566-6318-4d6a-83ad-a2b4d0afe1c3" alt="ICTEX Trade Logo" class="auth-logo">
                <h2>Create Account</h2>
                <div class="input-group"> <input type="text" id="register-name" class="auth-input" placeholder="Full Name" required> </div>
                <div class="input-group"> <input type="email" id="register-email" class="auth-input" placeholder="Email" required> </div>
                <div class="input-group"> <input type="password" id="register-password" class="auth-input" placeholder="Password (min. 6 characters)" required> </div>
                <div class="input-group"> <input type="text" id="register-mentor-id" class="auth-input" placeholder="Mentor ID (Optional)"> </div>
                <button type="submit" class="auth-button">Sign Up</button>
                <p class="form-toggle"> Already have an account? <a id="show-login">Login</a> </p>
            </form>
             <div id="register-loader" class="auth-loader"></div>
        </div>

        <!-- RESET PASSWORD FORM -->
        <div id="reset-password-form-wrapper" class="auth-form-wrapper">
            <form id="reset-password-form" class="auth-form">
                <img src="https://firebasestorage.googleapis.com/v0/b/viptask-5c1fc.appspot.com/o/1753379115046.png?alt=media&token=40be4566-6318-4d6a-83ad-a2b4d0afe1c3" alt="ICTEX Trade Logo" class="auth-logo">
                <h2>Reset Password</h2>
                <p style="text-align: center; color: var(--text-secondary); margin-top: -15px; font-size: 0.9rem;">Enter your email to receive a password reset link.</p>
                <div class="input-group"> <input type="email" id="reset-email" class="auth-input" placeholder="Email" required> </div>
                <button type="submit" class="auth-button">Send Reset Link</button>
                <p class="form-toggle"> Remember your password? <a id="back-to-login">Login</a> </p>
            </form>
             <div id="reset-password-loader" class="auth-loader"></div>
        </div>
    </div>

    <!-- MAIN TRADING APP -->
    <div id="main-app-wrapper">
        <div class="app-container">
            <header class="app-header" id="main-app-header">
                <div class="app-branding">
                    <img src="https://firebasestorage.googleapis.com/v0/b/viptask-5c1fc.appspot.com/o/1753379115046.png?alt=media&token=40be4566-6318-4d6a-83ad-a2b4d0afe1c3" alt="ICTEX Logo" class="app-logo">
                    <span class="app-name-text">ICTEX</span>
                </div>
                <div id="header-balance-container">
                    <span id="balance-icon"></span>
                    <span id="balance-live-text">LIVE</span>
                    <span id="balance-amount">$0.00</span>
                </div>
            </header>

            <main>
                <!-- Main App Views -->
                <div id="view-chart" class="view active">
                    <section class="chart-section">
                        <div class="chart-top-bar"> <button id="chart-timeframe-btn">1M</button> <div id="live-clock">00:00:00</div> </div>
                        <canvas id="chart-canvas"></canvas>
                    </section>
                    <section class="controls-section" id="controls-section">
                        <div class="inputs-row">
                            <div class="control-box timer-control">
                                <label>Expiry Timer</label>
                                <div id="bet-expiry-btn">01:00</div>
                            </div>
                            <div class="control-box investment-control">
                                <label>Investment</label>
                                <div class="investment-wrapper">
                                    <button id="btn-minus" class="invest-btn">-</button>
                                    <span id="amount-display">$ 10.00</span>
                                    <button id="btn-plus" class="invest-btn">+</button>
                                </div>
                            </div>
                        </div>
                        <div class="payout-info"> <span>Payout: </span><span id="payout-amount">$18.50</span> </div>
                        <div class="action-buttons">
                            <button class="btn btn-down" id="btn-down">
                                <span>Down</span>
                                <svg class="btn-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 16l-6-6h12z"/></svg>
                            </button>
                            <button class="btn btn-up" id="btn-up">
                                <span>Up</span>
                                <svg class="btn-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 8l6 6H6z"/></svg>
                            </button>
                        </div>
                    </section>
                </div>
                <div id="view-history" class="view"> <div class="page-content" id="history-list-container"></div> </div>
                <div id="view-profile" class="view">
                     <div class="page-content">
                        <div class="profile-header">
                            <div class="profile-pic-container">
                                <div class="profile-pic-label">
                                    <img id="profile-pic-img" alt="Profile Picture">
                                </div>
                            </div>
                            <div id="profile-info-email"></div>
                            <div id="profile-info-id"></div>
                            <div id="profile-verified-status"></div>
                        </div>
                        <form id="profile-form" class="page-form" style="background:transparent; padding:0;">
                             <div class="form-input-group"> <label for="profile-nickname">Nickname</label> <input type="text" id="profile-nickname" class="form-input" maxlength="16"> </div>
                             <div class="form-input-group"> <label for="profile-firstname">First Name</label> <input type="text" id="profile-firstname" class="form-input"> </div>
                             <div class="form-input-group"> <label for="profile-lastname">Last Name</label> <input type="text" id="profile-lastname" class="form-input"> </div>
                             <div class="form-input-group"> <label for="profile-dob">Date of Birth</label> <input type="date" id="profile-dob" class="form-input"> </div>
                             <div class="form-input-group"> <label for="profile-email">Email</label> <div class="email-verify-group"> <input type="email" id="profile-email" class="form-input" disabled> <span id="email-verify-status"></span> </div> </div>
                             <div class="form-input-group"> <label for="profile-country">Country</label> <input type="text" id="profile-country" class="form-input"> </div>
                             <div class="form-input-group"> <label for="profile-address">Address</label> <input type="text" id="profile-address" class="form-input"> </div>
                             <button type="submit" class="save-button">Save Changes</button>
                        </form>
                        <div style="padding: 0 10px; margin-top: 20px;">
                             <a href="#" id="kyc-link" class="settings-link"> <span>KYC Verification</span> <span id="kyc-status-badge" class="status-badge"></span> </a>
                        </div>
                    </div>
                </div>
                <div id="view-leaderboard" class="view">
                    <div class="page-header">
                        <button class="back-btn" data-view="chart"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M15.41 7.41L14 6l-6 6l6 6l1.41-1.41L10.83 12z"/></svg> </button>
                        <h2>Leader Board <small style="color:var(--text-secondary);font-weight:400;">of the Day</small></h2>
                        <button id="leaderboard-help-icon-btn" class="header-icon-btn">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41c0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z"/></svg>
                        </button>
                    </div>
                    <div class="page-content" style="padding: 15px 0; display: flex; flex-direction: column;">
                        <div id="leaderboard-loader">
                             <img src="https://firebasestorage.googleapis.com/v0/b/viptask-5c1fc.appspot.com/o/1753379115046.png?alt=media&token=40be4566-6318-4d6a-83ad-a2b4d0afe1c3" alt="Loading...">
                        </div>
                        <div id="leaderboard-content">
                            <div id="leaderboard-my-rank">
                                <!-- My rank will be injected here -->
                            </div>
                            <div id="leaderboard-list">
                                <!-- Top 50 list will be injected here -->
                            </div>
                        </div>
                    </div>
                </div>
                <div id="view-settings" class="view"> 
                    <div class="page-content">
                        <h2>Settings</h2>
                        <div class="settings-grid">
                            <a href="#" class="settings-grid-item" data-view="deposit-new"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M5 20h14v-2H5v2zm0-10h4v6h6v-6h4l-7-7l-7 7z"/></svg> <span>Deposit</span> </a>
                            <a href="#" class="settings-grid-item" data-view="withdraw"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M5 8h4V2h6v6h4l-7 7l-7-7zm14 10H5v2h14v-2z"/></svg> <span>Withdraw</span> </a>
                            <a href="#" class="settings-grid-item" data-view="analysis"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M16 6l2.29 2.29l-4.88 4.88l-4-4L2 16.59L3.41 18l6-6l4 4l6.3-6.29L22 12V6h-6z"/></svg> <span>Trade Analysis</span> </a>
                            <a href="#" class="settings-grid-item" data-view="transactions"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M20 6h-2.18c.11-.31.18-.65.18-1c0-1.66-1.34-3-3-3s-3 1.34-3 3c0 .35.07.69.18 1H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-5-2c.55 0 1 .45 1 1s-.45 1-1 1s-1-.45-1-1s.45-1 1-1zM4 19V8h16v11H4z"/></svg> <span>Transactions</span> </a>
                            <a href="#" class="settings-grid-item" data-view="tournament"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M19 5h-2V3H7v2H5c-1.1 0-2 .9-2 2v1c0 2.55 1.92 4.63 4.39 4.94c.63 1.5 1.98 2.63 3.61 2.96V19H7v2h10v-2h-4v-3.1c1.63-.33 2.98-1.46 3.61-2.96C19.08 12.63 21 10.55 21 8V7c0-1.1-.9-2-2-2zm-7 6c-1.66 0-3-1.34-3-3V7h6v1c0 1.66-1.34 3-3 3z"/></svg> <span>Tournament</span> </a>
                            <a href="https://t.me/Ictexsupport_bot" target="_blank" class="settings-grid-item"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/></svg> <span>Support</span> </a>
                            <a href="#" class="settings-grid-item" data-view="mentor"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05c1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z"/></svg> <span>Become a Mentor</span> </a>
                        </div>
                        <button id="logout-button" class="logout-button">Logout</button>
                    </div>
                </div>

                <!-- Sub-page Views (KYC, Withdraw, etc.) -->
                <div id="view-kyc" class="view">
                    <div class="page-header">
                        <button class="back-btn" data-view="profile"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M15.41 7.41L14 6l-6 6l6 6l1.41-1.41L10.83 12z"/></svg> </button>
                        <h2>KYC Verification</h2>
                    </div>
                    <div class="page-content">
                        <div id="kyc-current-status-info" style="display:none;"></div>
                        <form id="kyc-form" class="page-form kyc-form">
                            <div class="kyc-info-box">
                                <p>To ensure account security, we require identity verification. Please submit clear and valid documents. This process can take up to 48 hours.</p>
                            </div>
                            <div class="form-input-group">
                                <label for="kyc-doc-type">Document Type</label>
                                <select id="kyc-doc-type" class="form-input">
                                    <option value="nid">National ID Card</option>
                                    <option value="passport">Passport</option>
                                </select>
                            </div>
                            <div class="form-input-group" id="kyc-nid-group">
                                <label for="kyc-nid-number">ID Card Number</label>
                                <input type="text" id="kyc-nid-number" class="form-input" placeholder="Enter your ID card number">
                            </div>
                            <div class="form-input-group">
                                <label for="kyc-file-front" class="proof-upload-label">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="17 8 12 3 7 8"></polyline><line x1="12" y1="3" x2="12" y2="15"></line></svg>
                                    <span>Upload Document Front Side</span>
                                    <span id="kyc-file-front-name" class="file-name">No file chosen</span>
                                </label>
                                <input type="file" id="kyc-file-front" accept="image/*" required>
                            </div>
                            <div class="form-input-group">
                                <label for="kyc-file-back" class="proof-upload-label">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="17 8 12 3 7 8"></polyline><line x1="12" y1="3" x2="12" y2="15"></line></svg>
                                    <span>Upload Document Back Side</span>
                                    <span id="kyc-file-back-name" class="file-name">No file chosen</span>
                                </label>
                                <input type="file" id="kyc-file-back" accept="image/*" required>
                            </div>
                            <div class="form-input-group">
                                <label for="kyc-file-selfie" class="proof-upload-label">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4s-4 1.79-4 4s1.79 4 4 4Zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4Z"/></svg>
                                    <span>Upload a Selfie</span>
                                    <span id="kyc-file-selfie-name" class="file-name">No file chosen</span>
                                </label>
                                <input type="file" id="kyc-file-selfie" accept="image/*" required>
                            </div>
                            <button type="submit" id="kyc-submit-button" class="save-button">Submit for Verification</button>
                        </form>
                    </div>
                </div>
                <div id="view-withdraw" class="view">
                    <div class="page-header">
                        <button class="back-btn" data-view="settings"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M15.41 7.41L14 6l-6 6l6 6l1.41-1.41L10.83 12z"/></svg> </button>
                        <h2>Withdraw</h2>
                    </div>
                    <div class="page-content">
                        <div class="withdraw-info-cards">
                            <div class="withdraw-info-card"> <div class="label">Total Balance</div> <div id="withdraw-total-balance" class="value">$0.00</div> </div>
                            <div class="withdraw-info-card"> <div class="label">Available for Withdrawal</div> <div id="withdraw-available-balance" class="value">$0.00</div> </div>
                            <div class="withdraw-info-card"> <div class="label">Bonus</div> <div id="withdraw-commission" class="value">$0.00</div> </div>
                        </div>
                        <h3>Withdrawal:</h3>
                        <form id="withdraw-form" class="page-form">
                             <div class="form-input-group">
                                 <label for="withdraw-amount">Amount (USD)</label>
                                 <input type="number" id="withdraw-amount" class="form-input" placeholder="Min $50" required>
                                 <p id="withdraw-fee-info"></p>
                             </div>
                            <div class="form-input-group"> <label>Payment method</label> <div id="withdraw-method-selector" class="custom-select" data-value="binance-pay">Binance Pay</div> </div>
                             <div class="form-input-group"> <label for="withdraw-receive-type">Receive type</label> <input type="text" id="withdraw-receive-type" class="form-input" readonly> </div>
                            <div class="form-input-group"> <label for="withdraw-account-id">Account ID / Address</label> <input type="text" id="withdraw-account-id" class="form-input" required> </div>
                            <button type="submit" class="save-button">Confirm</button>
                        </form>
                    </div>
                </div>
                <div id="view-analysis" class="view">
                     <div class="page-header">
                        <button class="back-btn" data-view="settings"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M15.41 7.41L14 6l-6 6l6 6l1.41-1.41L10.83 12z"/></svg> </button>
                        <h2>Trade Analysis</h2>
                    </div>
                    <div class="page-content">
                        <div class="analysis-filters">
                            <button class="filter-btn active" data-period="all">All Time</button> <button class="filter-btn" data-period="7d">7 Days</button>
                            <button class="filter-btn" data-period="3d">3 Days</button> <button class="filter-btn" data-period="1d">Today</button>
                        </div>
                        <div class="analysis-grid">
                            <div class="stat-card"> <div class="stat-card-title">Win Rate</div> <div id="analysis-win-rate" class="stat-card-value">0%</div> </div>
                            <div class="stat-card"> <div class="stat-card-title">Profit / Loss</div> <div id="analysis-pnl" class="stat-card-value">$0.00</div> </div>
                            <div class="stat-card"> <div class="stat-card-title">Total Trades</div> <div id="analysis-total-trades" class="stat-card-value">0</div> </div>
                            <div class="stat-card"> <div class="stat-card-title">Avg. Investment</div> <div id="analysis-avg-invest" class="stat-card-value">$0.00</div> </div>
                        </div>
                    </div>
                </div>
                <div id="view-tournament" class="view">
                    <div class="page-header">
                        <button class="back-btn" data-view="settings"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M15.41 7.41L14 6l-6 6l6 6l1.41-1.41L10.83 12z"/></svg> </button>
                        <h2>Tournament</h2>
                    </div>
                    <div class="page-content"> <h2>Coming Soon!</h2> <p>Get ready for exciting tournaments with huge prize pools. Stay tuned!</p> </div>
                </div>
                <div id="view-transactions" class="view">
                    <div class="page-header">
                        <button class="back-btn" data-view="settings"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M15.41 7.41L14 6l-6 6l6 6l1.41-1.41L10.83 12z"/></svg> </button>
                        <h2>Transactions</h2>
                    </div>
                    <div class="page-content"> <div id="transaction-list-container"></div> </div>
                </div>
                <!-- NEW: MENTOR PAGE VIEW -->
                <div id="view-mentor" class="view">
                    <div class="page-header">
                        <button class="back-btn" data-view="settings"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M15.41 7.41L14 6l-6 6l6 6l1.41-1.41L10.83 12z"/></svg> </button>
                        <h2>Become a Mentor</h2>
                    </div>
                    <div class="page-content">
                        <p style="font-size: 1rem; line-height: 1.6;">Join the ICTEX Mentor Program to guide new traders, build your community, and earn rewards for your expertise.</p>
                        <ul class="mentor-benefits-list">
                            <li>
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5l1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>
                                <span>Earn commission from your referred traders.</span>
                            </li>
                            <li>
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5l1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>
                                <span>Get access to exclusive tools and analytics.</span>
                            </li>
                             <li>
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5l1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>
                                <span>Build your reputation as an expert trader.</span>
                            </li>
                             <li>
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5l1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>
                                <span>Receive priority support from our team.</span>
                            </li>
                        </ul>
                        <a href="https://t.me/Ictexsupport_bot" target="_blank" class="join-mentor-btn">Join Now</a>
                    </div>
                </div>

                <!-- PREMIUM DEPOSIT VIEWS -->
                <div id="view-deposit-new" class="view">
                    <div class="page-header">
                        <button class="back-btn" data-view="settings"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M15.41 7.41L14 6l-6 6l6 6l1.41-1.41L10.83 12z"/></svg> </button>
                        <h2>Deposit</h2>
                    </div>
                    <div class="page-content">
                        <div class="deposit-card-new">
                            <label>Deposit Amount (USD)</label>
                            <div class="deposit-amount-display">
                                <span class="dollar-sign">$</span>
                                <input type="number" id="deposit-amount-usd-new" placeholder="Min 10 USD">
                            </div>
                            <div class="quick-amount-buttons-new">
                                <button class="quick-amount-btn-new" data-amount="10">$10</button>
                                <button class="quick-amount-btn-new" data-amount="50">$50</button>
                                <button class="quick-amount-btn-new" data-amount="100">$100</button>
                                <button class="quick-amount-btn-new" data-amount="500">$500</button>
                            </div>
                        </div>
                        <div class="deposit-card-new">
                            <label>Promo Code (Optional)</label>
                            <div class="promo-code-wrapper-new">
                                <input type="text" id="promo-code-new" placeholder="Enter promo code">
                                <button id="apply-promo-btn-new">Apply</button>
                            </div>
                            <div id="promo-feedback-new" class="promo-feedback">
                                <span id="promo-feedback-text"></span>
                                <p id="promo-calculation-display" style="display:none;"></p>
                            </div>
                        </div>
                        <button id="deposit-next-btn-new">Next</button>
                    </div>
                </div>
                
                <div id="view-deposit-methods" class="view">
                    <div class="page-header">
                        <button class="back-btn" data-view="deposit-new"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M15.41 7.41L14 6l-6 6l6 6l1.41-1.41L10.83 12z"/></svg> </button>
                        <h2>Select Payment Method</h2>
                    </div>
                    <div class="page-content">
                        <div id="payment-method-grid"></div>
                    </div>
                </div>
                
                <div id="view-payment-details" class="view">
                    <div class="page-header">
                        <button class="back-btn" data-view="deposit-methods"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M15.41 7.41L14 6l-6 6l6 6l1.41-1.41L10.83 12z"/></svg> </button>
                        <h2>Payment</h2>
                    </div>
                    <div class="page-content" id="payment-details-content-new"></div>
                </div>

            </main>
            
            <nav class="app-nav">
                <button id="nav-btn-chart" class="nav-btn active" data-view="chart"></button>
                <button id="nav-btn-history" class="nav-btn" data-view="history"></button>
                <button id="nav-btn-profile" class="nav-btn" data-view="profile"></button>
                <button id="nav-btn-leaderboard" class="nav-btn" data-view="leaderboard"></button>
                <button id="nav-btn-settings" class="nav-btn" data-view="settings"></button>
            </nav>
            
            <div class="modal-overlay" id="chart-timeframe-modal"><div class="modal-content"><h3>Select Chart Timeframe</h3><div class="modal-grid"><button class="time-option" data-time="30">30s</button> <button class="time-option" data-time="60">1m</button> <button class="time-option" data-time="120">2m</button> <button class="time-option" data-time="300">5m</button> <button class="time-option" data-time="1800">30m</button> <button class="time-option" data-time="3600">1h</button></div></div></div>
            <div class="modal-overlay" id="bet-expiry-modal"><div class="modal-content"><h3>Select Expiry Timer</h3><div class="modal-grid" id="expiry-timer-content"></div></div></div>
            <div class="modal-overlay" id="withdraw-method-modal">
                <div class="modal-content"> <h3>Select Withdrawal Method</h3> <div id="withdraw-method-options" class="method-option-list"></div> </div>
            </div>
            
            <div class="modal-overlay" id="investment-amount-modal">
                <div class="modal-content">
                    <h3>Enter Investment Amount</h3>
                    <div class="form-input-group">
                        <input type="number" id="manual-amount-input" class="form-input" step="1" min="1" placeholder="Enter amount">
                    </div>
                    <div class="modal-button-row">
                        <button id="cancel-amount-btn" class="modal-button secondary">Cancel</button>
                        <button id="confirm-amount-btn" class="modal-button primary">Confirm</button>
                    </div>
                </div>
            </div>

            <div class="modal-overlay" id="password-confirm-modal">
                 <div class="modal-content">
                    <h3>Confirm Withdrawal</h3>
                    <p style="text-align:left; color: var(--text-secondary);">Enter your password to authorize this transaction.</p>
                    <form id="password-confirm-form">
                        <div class="form-input-group"> <label for="confirm-password">Password</label> <input type="password" id="confirm-password" class="form-input" required> </div>
                        <button type="submit" class="save-button">Authorize</button>
                    </form>
                </div>
            </div>
             <div class="modal-overlay" id="leaderboard-help-modal">
                 <div class="modal-content">
                    <svg class="lb-help-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2L9.5 7H14.5L12 2ZM8.5 7L5 8.5L6.5 4L8.5 7ZM15.5 7L19 8.5L17.5 4L15.5 7ZM4.5 9H19.5L21 12H3L4.5 9ZM3 13H21V19C21 20.1 20.1 21 19 21H5C3.9 21 3 20.1 3 19V13Z"/></svg>
                    <h3>How does it work?</h3>
                     <p style="text-align: center; color: var(--text-secondary); margin-top: -10px;">All traders on our platform participate in this rating. Main features of the rating:</p>
                     <ul class="lb-help-rules">
                         <li>Calculated every day, from 00:00 UTC to 23:59 UTC</li>
                         <li>Participants can only be those who trade in live mode</li>
                         <li>Your position depends on the amount of earned money</li>
                     </ul>
                     <div id="lb-help-my-rating">
                         <h4 style="margin: 0 0 10px 0; font-weight: 500;">My rating in the Leader Board</h4>
                         <div id="leaderboard-help-my-rank-display" class="leaderboard-item"></div>
                     </div>
                </div>
            </div>
            
            <div class="modal-overlay" id="leaderboard-user-profile-modal">
                <div class="modal-content">
                    <div class="lb-user-profile-header">
                        <div id="lb-user-profile-pic"></div>
                        <h3 id="lb-user-profile-name"></h3>
                    </div>
                    <div class="lb-user-profile-body">
                        <div class="lb-user-stats-grid">
                            <div class="lb-user-stat">
                                <div class="lb-user-stat-label">Today's Trades</div>
                                <div id="lb-user-stat-trades" class="lb-user-stat-value"></div>
                            </div>
                            <div class="lb-user-stat">
                                <div class="lb-user-stat-label">Win Rate</div>
                                <div id="lb-user-stat-winrate" class="lb-user-stat-value win"></div>
                            </div>
                            <div class="lb-user-stat">
                                <div class="lb-user-stat-label">Rating</div>
                                <div id="lb-user-stat-rating" class="lb-user-stat-value" style="color: var(--color-golden);"></div>
                            </div>
                             <div class="lb-user-stat">
                                <div class="lb-user-stat-label">Wins / Losses</div>
                                <div class="lb-user-stat-value">
                                    <span id="lb-user-stat-wins" class="win"></span> / <span id="lb-user-stat-losses" class="loss"></span>
                                </div>
                            </div>
                        </div>
                        <div class="lb-user-bio">
                            <h4>Trader Note</h4>
                            <p id="lb-user-bio-text"></p>
                        </div>
                    </div>
                     <button id="lb-user-profile-close-btn" class="modal-button primary">Close</button>
                </div>
            </div>

        </div>
    </div>
    <div id="notification"></div>

<script>
    // --- SCRIPT START ---
    document.addEventListener('DOMContentLoaded', () => {
        const firebaseConfig = {
            apiKey: "AIzaSyCs8ifLT2XwwKUAri3JNJHIRuzPBfA8THs",
            authDomain: "sure-walet-5449.firebaseapp.com",
            databaseURL: "https://sure-walet-5449-default-rtdb.firebaseio.com",
            projectId: "sure-walet-5449",
            storageBucket: "sure-walet-5449.appspot.com",
            messagingSenderId: "74258991313",
            appId: "1:74258991313:web:7021878421294c14215df0"
        };
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const database = firebase.database();
        const storage = firebase.storage();
        
        // --- CONFIGURATION ---
        const TELEGRAM_BOT_TOKEN = "7511255488:AAG53cbsuOfP5F2ippmPLaItyfnCCWyVPko";
        const TELEGRAM_CHAT_ID = "7504616242";
        const DEPOSIT_RATE_BDT = 125;
        const WITHDRAW_RATE_BDT = 123;
        const MIN_DEPOSIT_USD = 10;
        const DEPOSIT_SESSION_SECONDS = 600;
        const CHART_SYNC_INTERVAL = 5000;
        const DEFAULT_LOGO_URL = "https://firebasestorage.googleapis.com/v0/b/viptask-5c1fc.appspot.com/o/1753379115046.png?alt=media&token=40be4566-6318-4d6a-83ad-a2b4d0afe1c3";


        // --- DOM ELEMENTS ---
        const appLoader = document.getElementById('app-loader');
        const notificationElement = document.getElementById('notification');
        const authContainer = document.getElementById('auth-container');
        const mainAppWrapper = document.getElementById('main-app-wrapper');
        const loginForm = document.getElementById('login-form');
        const registerForm = document.getElementById('register-form');
        const showRegisterBtn = document.getElementById('show-register');
        const showLoginBtn = document.getElementById('show-login');
        const loginFormWrapper = document.getElementById('login-form-wrapper');
        const registerFormWrapper = document.getElementById('register-form-wrapper');
        const loginLoader = document.getElementById('login-loader');
        const registerLoader = document.getElementById('register-loader');
        
        const resetPasswordFormWrapper = document.getElementById('reset-password-form-wrapper');
        const resetPasswordForm = document.getElementById('reset-password-form');
        const resetPasswordLoader = document.getElementById('reset-password-loader');
        const showResetPasswordBtn = document.getElementById('show-reset-password');
        const backToLoginBtn = document.getElementById('back-to-login');

        const logoutButton = document.getElementById('logout-button');
        const canvas = document.getElementById('chart-canvas'), ctx = canvas.getContext('2d');
        const mainAppHeader = document.getElementById('main-app-header');
        const headerBalanceElement = document.getElementById('header-balance-container');
        const balanceIconElement = document.getElementById('balance-icon');
        const balanceAmountElement = document.getElementById('balance-amount');
        const btnUp = document.getElementById('btn-up'), btnDown = document.getElementById('btn-down');
        const betExpiryBtn = document.getElementById('bet-expiry-btn');
        const amountDisplay = document.getElementById('amount-display');
        const payoutAmount = document.getElementById('payout-amount');
        const btnPlus = document.getElementById('btn-plus'), btnMinus = document.getElementById('btn-minus');
        const chartTimeframeBtn = document.getElementById('chart-timeframe-btn');
        const liveClock = document.getElementById('live-clock');
        const chartTimeframeModal = document.getElementById('chart-timeframe-modal');
        const betExpiryModal = document.getElementById('bet-expiry-modal');
        const investmentAmountModal = document.getElementById('investment-amount-modal');
        const manualAmountInput = document.getElementById('manual-amount-input');
        const confirmAmountBtn = document.getElementById('confirm-amount-btn');
        const cancelAmountBtn = document.getElementById('cancel-amount-btn');
        const appNav = document.querySelector('.app-nav');
        const views = document.querySelectorAll('.view');
        const historyListContainer = document.getElementById('history-list-container');
        const profileForm = document.getElementById('profile-form');
        const profilePicImg = document.getElementById('profile-pic-img');
        const profileInfoEmail = document.getElementById('profile-info-email');
        const profileInfoId = document.getElementById('profile-info-id');
        const profileVerifiedStatus = document.getElementById('profile-verified-status');
        const profileEmailInput = document.getElementById('profile-email');
        const emailVerifyStatus = document.getElementById('email-verify-status');
        const kycLink = document.getElementById('kyc-link');
        const kycStatusBadge = document.getElementById('kyc-status-badge');
        const kycForm = document.getElementById('kyc-form');
        const kycDocTypeSelect = document.getElementById('kyc-doc-type');
        const kycNidGroup = document.getElementById('kyc-nid-group');
        const kycSubmitButton = document.getElementById('kyc-submit-button');
        const kycCurrentStatusInfo = document.getElementById('kyc-current-status-info');
        const settingsGrid = document.querySelector('.settings-grid');
        const backBtns = document.querySelectorAll('.back-btn');
        const transactionListContainer = document.getElementById('transaction-list-container');
        const analysisFilterContainer = document.querySelector('.analysis-filters');
        const withdrawForm = document.getElementById('withdraw-form');
        const withdrawAmountInput = document.getElementById('withdraw-amount');
        const withdrawFeeInfo = document.getElementById('withdraw-fee-info');
        const withdrawMethodSelector = document.getElementById('withdraw-method-selector');
        const withdrawMethodModal = document.getElementById('withdraw-method-modal');
        const withdrawMethodOptionsContainer = document.getElementById('withdraw-method-options');
        const withdrawReceiveTypeInput = document.getElementById('withdraw-receive-type');
        const withdrawAccountIdInput = document.getElementById('withdraw-account-id');
        const passwordConfirmModal = document.getElementById('password-confirm-modal');
        const passwordConfirmForm = document.getElementById('password-confirm-form');
        const leaderboardLoader = document.getElementById('leaderboard-loader');
        const leaderboardContent = document.getElementById('leaderboard-content');
        const leaderboardList = document.getElementById('leaderboard-list');
        const leaderboardMyRank = document.getElementById('leaderboard-my-rank');
        const leaderboardHelpIconBtn = document.getElementById('leaderboard-help-icon-btn');
        const leaderboardHelpModal = document.getElementById('leaderboard-help-modal');
        const leaderboardHelpMyRankDisplay = document.getElementById('leaderboard-help-my-rank-display');
        const leaderboardUserProfileModal = document.getElementById('leaderboard-user-profile-modal');
        const lbUserProfileCloseBtn = document.getElementById('lb-user-profile-close-btn');
        const depositAmountInputNew = document.getElementById('deposit-amount-usd-new');
        const quickAmountButtonsNew = document.querySelectorAll('.quick-amount-btn-new');
        const depositNextBtnNew = document.getElementById('deposit-next-btn-new');
        const paymentMethodGrid = document.getElementById('payment-method-grid');
        const paymentDetailsContentNew = document.getElementById('payment-details-content-new');
        const promoCodeInput = document.getElementById('promo-code-new');
        const applyPromoBtn = document.getElementById('apply-promo-btn-new');
        const promoFeedbackEl = document.getElementById('promo-feedback-new');
        const promoFeedbackText = document.getElementById('promo-feedback-text');
        const promoCalculationDisplay = document.getElementById('promo-calculation-display');

        const iconPlane = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M2.01 21L23 12L2.01 3L2 10l15 2l-15 2z"/></svg>`;
        const iconCrown = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12 2L9 9h6l-3-7ZM5 10l3-7H2l3 7Zm14 0l-3-7h6l-3 7ZM4 12v2h16v-2H4Z M6 16v5h12v-5H6Z"/></svg>`;
        const iconDiamond = `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 2L2 8.5L12 22L22 8.5L12 2Z M12 22V8.5 M2 8.5H22" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>`;
        const navIconChart = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M7.5 2.5h-2v5h2v-5Zm3.33 4h-2v11h2v-11ZM5 11.5v3h5v-3H5Zm11.67-4h-2v11h2v-11Zm-2.5 13h5v-3h-5v3Zm.83-8h2v5h-2v-5Z"/></svg>`;
        const navIconHistory = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12 2a10 10 0 1 0 10 10A10 10 0 0 0 12 2Zm0 18a8 8 0 1 1 8-8a8 8 0 0 1-8 8Zm1-12h-2v5.41l4.28 2.54l.72-1.21l-3.5-2.08Z"/></svg>`;
        const navIconProfile = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4s-4 1.79-4 4s1.79 4 4 4Zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4Z"/></svg>`;
        const navIconLeaderboard = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12 2L8.5 7H11v4H7v7h10v-7h-4V7h2.5L12 2zM6 20v-5H2v5h4zm16 0v-5h-4v5h4z"/></svg>`;
        const navIconSettings = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="m9.25 22l-.4-3.2q-.325-.125-.613-.3t-.562-.35l-3.025 1.25l-2.8-4.85l2.4-1.95q-.05-.2-.075-.4t-.025-.5q0-.2.025-.5t-.075-.4l-2.4-1.95l2.8-4.85l3.025 1.25q.275-.175-.562-.35t.613-.3L9.25 2h5.5l.4 3.2q.325.125.613-.3t.562.35l3.025-1.25l2.8 4.85l-2.4 1.95q.05.2.075-.4t.025-.5q0 .2-.025-.5t-.075-.4l2.4 1.95l-2.8 4.85l-3.025-1.25q-.275-.175-.562-.35t-.613-.3l-.4 3.2h-5.5Zm2.75-6.5q1.45 0 2.475-1.025T15.5 12q0-1.45-1.025-2.475T12 8.5q-1.45 0-2.475 1.025T8.5 12q0 1.45 1.025 2.475T12 15.5Z"/></svg>`;
        
        const COLOR_UP = '#00C853', COLOR_DOWN = '#D50000', COLOR_GRID = '#1e222d', COLOR_GRID_TEXT = '#8a8e97';
        const RIGHT_PADDING = 65, CANDLE_PATH_STEPS = 1000, MAX_STORED_CANDLES = 3000, FUTURE_SPACE_CANDLES = 5;
        let chartTimeframe, selectedTimerDuration; 
        const currentMarket = 'ICTEX OTC';
        let investmentAmount = 10.00;
        let balance = 0.00, realBalance = 0.00, bonusBalance = 0.00;
        const PAYOUT_RATE = 1.85;
        let canvasWidth, canvasHeight, historicalData = [], myActiveBets = [], tradeHistory = [], transactionHistory = [];
        let currentView = 'chart', lastFrameTime = 0, animationFrameId;
        let isPanning = false, isScaling = false, isPinching = false;
        let panStartX = 0, scaleStartY = 0, initialPinchDistance = 0, panDragDistance = 0, viewOffset = 0;
        let visibleCandles = 20, verticalZoomFactor = 1.0;
        let candlesRef, isAppInitialized = false, isSyncing = false;
        let currentUserData = null;
        let currentDepositData = {};
        let depositTimerInterval = null;
        let leaderboardUpdateInterval = null;
        let chartSyncSafetyNet = null;
        let leaderboardDataCache = [];
        let promoCodesDB = {}; 

        String.prototype.hashCode = function() {
            var hash = 0, i, chr;
            if (this.length === 0) return hash;
            for (i = 0; i < this.length; i++) {
                chr   = this.charCodeAt(i);
                hash  = ((hash << 5) - hash) + chr;
                hash |= 0; // Convert to 32bit integer
            }
            return hash;
        };
        
        function showNotification(m,t){notificationElement.textContent=m;notificationElement.className=`show ${t}`;setTimeout(()=>notificationElement.className='',3500);}
        function getFriendlyAuthError(error) {
            switch (error.code) {
                case 'auth/user-not-found': return 'No account found with this email.';
                case 'auth/wrong-password': return 'Incorrect password. Please try again.';
                case 'auth/email-already-in-use': return 'This email is already registered.';
                case 'auth/weak-password': return 'Password is too weak. Use at least 6 characters.';
                case 'auth/invalid-email': return 'The email address is not valid.';
                default: return 'An error occurred. Please try again.';
            }
        }
        
        async function sendTelegramMessage(text) {
            const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
            try { await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text: text, parse_mode: 'HTML' }) });
            } catch (error) { console.error("Telegram message failed:", error); }
        }
        async function sendTelegramPhoto(photoUrl, caption) {
             const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto`;
            try {
                await fetch(url, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, photo: photoUrl, caption: caption, parse_mode: 'HTML' })
                });
            } catch (error) { console.error("Telegram photo failed:", error); }
        }

        async function updateBalances({ realChange = 0, bonusChange = 0 }) {
            const user = auth.currentUser;
            if (!user || (realChange === 0 && bonusChange === 0)) return;
            
            const userRef = database.ref(`users/${user.uid}`);
            
            return userRef.transaction(currentData => {
                if (currentData) {
                    currentData.realBalance = (currentData.realBalance || 0) + realChange;
                    currentData.bonusBalance = (currentData.bonusBalance || 0) + bonusChange;
                    
                    if (currentData.realBalance < 0) currentData.realBalance = 0;
                    if (currentData.bonusBalance < 0) currentData.bonusBalance = 0;
                    
                    return currentData;
                }
                return currentData; 
            }).catch(error => {
                console.error("Balance transaction failed: ", error);
                showNotification("Error updating balance.", 'loss');
            });
        }
        
        auth.setPersistence(firebase.auth.Auth.Persistence.LOCAL)
            .then(() => {
                auth.onAuthStateChanged(user => {
                    if (user) {
                        if (!isAppInitialized) {
                            initApp(user); 
                            isAppInitialized = true;
                        }
                        user.reload().then(() => { if (currentUserData && currentUserData.emailVerified !== user.emailVerified) { database.ref('users/' + user.uid).update({ emailVerified: user.emailVerified }); } });
                        authContainer.style.display = 'none'; 
                        mainAppWrapper.style.display = 'flex';
                        setTimeout(() => {
                           resizeCanvas();
                           if(animationFrameId) cancelAnimationFrame(animationFrameId);
                           animationFrameId = requestAnimationFrame(gameLoop);
                        }, 50);
                    } else {
                        authContainer.style.display = 'flex'; 
                        mainAppWrapper.style.display = 'none';
                        isAppInitialized = false; 
                        if(animationFrameId) cancelAnimationFrame(animationFrameId);
                        if (leaderboardUpdateInterval) clearInterval(leaderboardUpdateInterval);
                        if (chartSyncSafetyNet) clearInterval(chartSyncSafetyNet);
                        currentUserData = null;
                         appLoader.style.opacity = '0'; 
                         setTimeout(() => appLoader.style.display = 'none', 300);
                    }
                });
            })
            .catch(error => { console.error("Auth persistence error:", error); appLoader.style.display = 'none'; });
        
        function toggleAuthForms(formToShow) {
            document.querySelectorAll('.auth-form-wrapper').forEach(form => {
                form.classList.remove('active', 'left-out');
            });

            const currentActive = document.querySelector('.auth-form-wrapper.active');
            if (currentActive) {
                currentActive.classList.add('left-out');
            }
            
            const targetForm = document.getElementById(`${formToShow}-form-wrapper`);
            if (targetForm) {
                 targetForm.classList.add('active');
            }
        }
        
        showRegisterBtn.addEventListener('click', (e) => { e.preventDefault(); toggleAuthForms('register'); });
        showLoginBtn.addEventListener('click', (e) => { e.preventDefault(); toggleAuthForms('login'); });
        showResetPasswordBtn.addEventListener('click', (e) => { e.preventDefault(); toggleAuthForms('reset-password'); });
        backToLoginBtn.addEventListener('click', (e) => { e.preventDefault(); toggleAuthForms('login'); });

        loginForm.addEventListener('submit', (e) => {
            e.preventDefault(); loginLoader.style.display = 'block';
            const email = loginForm['login-email'].value; const password = loginForm['login-password'].value;
            auth.signInWithEmailAndPassword(email, password).then(userCredential => { showNotification('Login successful!', 'win'); }).catch(error => { showNotification(getFriendlyAuthError(error), 'loss'); }).finally(() => { loginLoader.style.display = 'none'; });
        });

        registerForm.addEventListener('submit', (e) => {
            e.preventDefault(); registerLoader.style.display = 'block';
            const name = registerForm['register-name'].value; const email = registerForm['register-email'].value;
            const password = registerForm['register-password'].value; const mentorId = registerForm['register-mentor-id'].value;
            auth.createUserWithEmailAndPassword(email, password)
                .then(userCredential => {
                    const user = userCredential.user; const numericId = Date.now().toString().slice(-8);
                    const userData = {
                        name: name, email: email, numericId: numericId, mentorId: mentorId || null,
                        realBalance: 0.00,
                        bonusBalance: 0.00,
                        createdAt: firebase.database.ServerValue.TIMESTAMP,
                        emailVerified: user.emailVerified, kycStatus: 'unverified',
                        dailyProfit: 0,
                        profilePicUrl: DEFAULT_LOGO_URL
                    };
                    return database.ref('users/' + user.uid).set(userData);
                })
                .then(() => { showNotification('Registration successful! Please login.', 'win'); toggleAuthForms('login'); })
                .catch(error => { showNotification(getFriendlyAuthError(error), 'loss'); })
                .finally(() => { registerLoader.style.display = 'none'; });
        });

        resetPasswordForm.addEventListener('submit', (e) => {
            e.preventDefault();
            resetPasswordLoader.style.display = 'block';
            const email = resetPasswordForm['reset-email'].value;
            auth.sendPasswordResetEmail(email)
                .then(() => {
                    showNotification('Password reset link sent to your email.', 'info');
                    toggleAuthForms('login');
                })
                .catch(error => {
                    showNotification(getFriendlyAuthError(error), 'loss');
                })
                .finally(() => {
                    resetPasswordLoader.style.display = 'none';
                });
        });

        logoutButton.addEventListener('click', () => { auth.signOut().then(() => { showNotification('You have been logged out.', 'info'); }); });

        function showView(viewId) {
            if (viewId === currentView) return;
            if (currentView === 'payment-details') { stopDepositTimer(); }
            if (currentView === 'leaderboard' && leaderboardUpdateInterval) { clearInterval(leaderboardUpdateInterval); leaderboardUpdateInterval = null; }
            
            const isSubPageView = ['kyc', 'withdraw', 'analysis', 'tournament', 'transactions', 'leaderboard', 'mentor'].includes(viewId);
            const isDepositFlow = ['deposit-new', 'deposit-methods', 'payment-details'].includes(viewId);
            
            mainAppHeader.style.display = isSubPageView || isDepositFlow ? 'none' : 'flex';
            
            const oldView = document.querySelector('.view.active');
            const newView = document.getElementById(`view-${viewId}`);

            if (oldView) oldView.classList.remove('active');
            if (newView) newView.classList.add('active');
            
            currentView = viewId;

            const mainNavViews = ['chart', 'history', 'profile', 'leaderboard', 'settings'];
            document.querySelectorAll('.nav-btn').forEach(btn => {
                let isActive = btn.dataset.view === viewId;
                if (!mainNavViews.includes(viewId) && btn.dataset.view === 'settings') isActive = true; 
                else if (viewId === 'leaderboard' && btn.dataset.view === 'leaderboard') isActive = true;
                btn.classList.toggle('active', isActive);
            });
            
            if (viewId === 'history') renderTradeHistory();
            else if (viewId === 'profile') initProfilePage();
            else if (viewId === 'kyc') initKycPage();
            else if (viewId === 'deposit-new') initNewDepositPage();
            else if (viewId === 'withdraw') initWithdrawPage();
            else if (viewId === 'analysis') initAnalysisPage();
            else if (viewId === 'transactions') renderTransactionHistory();
            else if (viewId === 'leaderboard') initLeaderboardPage();
            else if (viewId === 'payment-details') startDepositTimer();
            else if (viewId === 'chart') { 
                resizeCanvas();
                forceChartSync();
            }
        }
        
        function initProfilePage() {
            if (!currentUserData) return;
            
            profilePicImg.src = DEFAULT_LOGO_URL;
            profileInfoEmail.textContent = currentUserData.email;
            profileInfoId.textContent = `ID: ${currentUserData.numericId}`;
            
            profileForm['profile-nickname'].value = currentUserData.nickname || currentUserData.name || '';
            profileForm['profile-firstname'].value = currentUserData.firstName || '';
            profileForm['profile-lastname'].value = currentUserData.lastName || '';
            profileForm['profile-dob'].value = currentUserData.dob || '';
            profileEmailInput.value = currentUserData.email;
            profileForm['profile-country'].value = currentUserData.country || '';
            profileForm['profile-address'].value = currentUserData.address || '';
            
            const fieldsToLock = ['profile-firstname', 'profile-lastname', 'profile-dob', 'profile-country', 'profile-address'];
            fieldsToLock.forEach(fieldName => {
                const input = profileForm[fieldName];
                if (input.value) {
                    input.disabled = true;
                } else {
                    input.disabled = false;
                }
            });
            
            updateVerificationStatusUI();
        }

        function updateVerificationStatusUI() {
            if (!currentUserData) return;
            const isEmailVerified = currentUserData.emailVerified; 
            const isKycVerified = currentUserData.kycStatus === 'verified';
            
            if (isEmailVerified) { 
                emailVerifyStatus.textContent = 'Verified'; emailVerifyStatus.className = 'verified'; emailVerifyStatus.onclick = null;
            } else { 
                                emailVerifyStatus.textContent = 'Click to Verify'; emailVerifyStatus.className = 'unverified'; emailVerifyStatus.onclick = sendVerificationEmail; 
            }
            
            if (isKycVerified) { 
                profileVerifiedStatus.innerHTML = `<span>Verified</span>`; 
                profileVerifiedStatus.className = 'verified';
            } else if (currentUserData.kycStatus === 'pending') {
                profileVerifiedStatus.innerHTML = `<span>Pending</span>`; 
                profileVerifiedStatus.className = 'unverified';
                profileVerifiedStatus.style.color = 'var(--color-pending)';
                profileVerifiedStatus.style.backgroundColor = 'rgba(255, 152, 0, 0.2)';
            } else {
                profileVerifiedStatus.innerHTML = `<span>Unverified</span>`; 
                profileVerifiedStatus.className = 'unverified'; 
                profileVerifiedStatus.style.color = '';
                profileVerifiedStatus.style.backgroundColor = '';
            }

            kycStatusBadge.textContent = currentUserData.kycStatus.toUpperCase(); 
            kycStatusBadge.className = `status-badge status-${currentUserData.kycStatus}`;
        }

        function sendVerificationEmail() {
            const user = auth.currentUser;
            if (user && !user.emailVerified) { user.sendEmailVerification().then(() => showNotification('Verification email sent to ' + user.email, 'info')).catch(error => showNotification('Error sending email: ' + error.message, 'loss')); }
        }

        profileForm.addEventListener('submit', (e) => {
            e.preventDefault(); const uid = auth.currentUser.uid;
            const updates = { 
                name: profileForm['profile-nickname'].value, 
                nickname: profileForm['profile-nickname'].value, 
            };
            
            const fieldsToUpdate = ['profile-firstname', 'profile-lastname', 'profile-dob', 'profile-country', 'profile-address'];
            fieldsToUpdate.forEach(fieldName => {
                const input = profileForm[fieldName];
                if (!input.disabled) {
                    const key = fieldName.replace('profile-', '');
                    updates[key] = input.value;
                }
            });
            
            database.ref('users/' + uid).update(updates).then(() => {
                 database.ref('leaderboard/daily/' + uid).update({ name: updates.name });
                 showNotification('Profile updated successfully!', 'win');
            }).catch(error => showNotification('Error updating profile: ' + error.message, 'loss'));
        });

        kycLink.addEventListener('click', (e) => { e.preventDefault(); showView('kyc'); });
        kycDocTypeSelect.addEventListener('change', () => { kycNidGroup.style.display = kycDocTypeSelect.value === 'nid' ? 'block' : 'none'; });

        function initKycPage() {
            kycForm.reset(); kycNidGroup.style.display = 'block';
            document.getElementById('kyc-file-front-name').textContent = 'No file chosen'; 
            document.getElementById('kyc-file-back-name').textContent = 'No file chosen'; 
            document.getElementById('kyc-file-selfie-name').textContent = 'No file chosen';
            const status = currentUserData.kycStatus;
            if (status === 'pending' || status === 'verified') {
                kycForm.style.display = 'none'; kycCurrentStatusInfo.style.display = 'block';
                let message = '';
                if (status === 'pending') message = `<div class="kyc-info-box"><p>Your documents are currently under review. This can take up to 48 hours.</p></div>`;
                else if (status === 'verified') message = `<div class="kyc-info-box"><p style="color: var(--color-up); font-weight: bold;">Congratulations! Your KYC is verified.</p></div>`;
                kycCurrentStatusInfo.innerHTML = message;
            } else if (status === 'rejected') {
                kycForm.style.display = 'flex'; kycCurrentStatusInfo.style.display = 'block';
                kycCurrentStatusInfo.innerHTML = `<div class="kyc-info-box"><p style="color: var(--color-down); font-weight: bold;">Your KYC submission was rejected.</p><p>Please check your documents and try again.</p></div>`;
            } else { kycForm.style.display = 'flex'; kycCurrentStatusInfo.style.display = 'none'; }
        }

        ['kyc-file-front', 'kyc-file-back', 'kyc-file-selfie'].forEach(id => {
            document.getElementById(id).addEventListener('change', (e) => {
                const fileName = e.target.files[0] ? e.target.files[0].name : '';
                document.getElementById(`${id}-name`).textContent = fileName;
            });
        });

        kycForm.addEventListener('submit', async (e) => {
            e.preventDefault(); kycSubmitButton.disabled = true; kycSubmitButton.textContent = 'Uploading...';
            const user = auth.currentUser;
            if (!user) { showNotification('User not found. Please re-login.', 'loss'); return; }
            const files = { front: document.getElementById('kyc-file-front').files[0], back: document.getElementById('kyc-file-back').files[0], selfie: document.getElementById('kyc-file-selfie').files[0] };
            if (!files.front || !files.back || !files.selfie) {
                showNotification('Please upload all three documents.', 'loss'); kycSubmitButton.disabled = false; kycSubmitButton.textContent = 'Submit for Verification'; return;
            }
            try {
                const uploadPromises = Object.entries(files).map(([key, file]) => {
                    const ref = storage.ref(`kyc-documents/${user.uid}/${key}-${Date.now()}`);
                    return ref.put(file).then(snapshot => snapshot.ref.getDownloadURL());
                });
                const [frontUrl, backUrl, selfieUrl] = await Promise.all(uploadPromises);
                const kycRequest = {
                    userId: user.uid, userEmail: user.email, userName: currentUserData.name,
                    docType: kycDocTypeSelect.value, nidNumber: document.getElementById('kyc-nid-number').value || null,
                    frontUrl, backUrl, selfieUrl, status: 'pending', timestamp: firebase.database.ServerValue.TIMESTAMP
                };
                const message = `<b>🔵 New KYC Request</b>\n\n` + `<b>User:</b> ${currentUserData.email} (ID: ${currentUserData.numericId})\n` + `<b>Name:</b> ${currentUserData.name}\n` + `<b>Doc Type:</b> ${kycRequest.docType}\n` + (kycRequest.nidNumber ? `<b>NID:</b> <code>${kycRequest.nidNumber}</code>\n` : '') + `<b>Front:</b> <a href="${frontUrl}">View</a>\n` + `<b>Back:</b> <a href="${backUrl}">View</a>\n` + `<b>Selfie:</b> <a href="${selfieUrl}">View</a>\n`;
                await database.ref('kyc_requests').push(kycRequest);
                await database.ref(`users/${user.uid}/kycStatus`).set('pending');
                await sendTelegramMessage(message);
                showNotification('KYC documents submitted for review!', 'win');
                kycForm.reset(); showView('profile');
            } catch (error) { console.error("KYC Submission Error:", error); showNotification('Submission failed: ' + error.message, 'loss');
            } finally { kycSubmitButton.disabled = false; kycSubmitButton.textContent = 'Submit for Verification'; }
        });
        
        const withdrawMethods = [
            { id: 'binance-pay', name: 'Binance Pay', receiveType: 'Binance account ID', placeholder: 'Enter 8-10 digit ID', isCrypto: true },
            { id: 'bkash', name: 'Bkash', receiveType: 'Bkash Account Number', placeholder: 'Your Bkash Number', isCrypto: false }, 
            { id: 'nagad', name: 'Nagad', receiveType: 'Nagad Account Number', placeholder: 'Your Nagad Number', isCrypto: false },
            { id: 'rocket', name: 'Rocket', receiveType: 'Rocket Account Number', placeholder: 'Your Rocket Number', isCrypto: false }, 
            { id: 'bnb', name: 'BNB (BEP20)', receiveType: 'Wallet Address', placeholder: 'Your BNB (BEP20) Address', isCrypto: true },
            { id: 'usdt', name: 'USDT (TRC20)', receiveType: 'Wallet Address', placeholder: 'Your USDT (TRC20) Address', isCrypto: true },
        ];
        
        function populateWithdrawalMethods() {
            withdrawMethodOptionsContainer.innerHTML = '';
            withdrawMethods.forEach(method => {
                const isChecked = withdrawMethodSelector.dataset.value === method.id;
                const optionHTML = `<label class="method-option" for="wm-${method.id}"><div class="method-info"><span>${method.name}</span></div><input type="radio" name="withdraw-method" id="wm-${method.id}" value="${method.id}" ${isChecked ? 'checked' : ''}><div class="radio-circle"></div></label>`;
                withdrawMethodOptionsContainer.insertAdjacentHTML('beforeend', optionHTML);
            });
            withdrawMethodOptionsContainer.querySelectorAll('.method-option').forEach(option => {
                option.addEventListener('click', () => {
                    const selectedValue = option.querySelector('input').value;
                    const selectedMethod = withdrawMethods.find(m => m.id === selectedValue);
                    if (selectedMethod) { updateWithdrawForm(selectedMethod); withdrawMethodModal.classList.remove('visible'); }
                });
            });
        }
        
        function initWithdrawPage() {
            if (!currentUserData) return;
            document.getElementById('withdraw-total-balance').textContent = `$${(realBalance + bonusBalance).toFixed(2)}`;
            document.getElementById('withdraw-available-balance').textContent = `$${realBalance.toFixed(2)}`;
            document.getElementById('withdraw-commission').textContent = `$${bonusBalance.toFixed(2)}`;
            updateWithdrawForm(withdrawMethods[0]);
        }

        function updateWithdrawForm(method) {
             if (!method) return;
             withdrawMethodSelector.textContent = method.name; withdrawMethodSelector.dataset.value = method.id;
             withdrawReceiveTypeInput.value = method.receiveType; withdrawAccountIdInput.placeholder = method.placeholder; withdrawAccountIdInput.value = '';
        }

        withdrawForm.addEventListener('submit', (e) => { e.preventDefault(); passwordConfirmModal.classList.add('visible'); });
        
        passwordConfirmForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const password = document.getElementById('confirm-password').value;
            const user = auth.currentUser;
            if (!user || !password) return;

            const submitBtn = passwordConfirmForm.querySelector('button[type="submit"]');
            submitBtn.disabled = true;
            submitBtn.textContent = 'Authorizing...';
            const appContainer = document.querySelector('.app-container');
            appContainer.style.pointerEvents = 'none';
            appContainer.style.opacity = '0.7';

            try {
                const credential = firebase.auth.EmailAuthProvider.credential(user.email, password);
                await user.reauthenticateWithCredential(credential);

                const withdrawAmount = parseFloat(withdrawAmountInput.value);
                const minWithdraw = 50;
                let fee = 0;

                if (isNaN(withdrawAmount) || withdrawAmount < minWithdraw) {
                    showNotification(`Minimum withdrawal is $${minWithdraw}.`, 'loss');
                    throw new Error("Validation failed");
                }
                if (withdrawAmount > realBalance) {
                    showNotification('Insufficient available balance for withdrawal.', 'loss');
                    throw new Error("Validation failed");
                }
                
                let realChange = -withdrawAmount;
                let bonusChange = 0;
                if (bonusBalance > 0) {
                    bonusChange = -bonusBalance;
                    setTimeout(() => showNotification('Bonus balance has been removed due to withdrawal.', 'info'), 1000);
                }
                
                await updateBalances({ realChange, bonusChange });

                const newRequestRef = database.ref('withdraw_requests').push();
                const selectedMethod = withdrawMethods.find(m => m.id === withdrawMethodSelector.dataset.value);
                const withdrawRequest = {
                    id: newRequestRef.key, userId: user.uid, userEmail: user.email, userName: currentUserData.name || 'N/A',
                    amount: withdrawAmount, fee: fee, method: selectedMethod.name,
                    accountId: withdrawAccountIdInput.value, status: 'pending', timestamp: firebase.database.ServerValue.TIMESTAMP,
                };
                
                await newRequestRef.set(withdrawRequest);

                const newTransaction = {
                    id: withdrawRequest.id, timestamp: Date.now(), status: 'pending', amount: -withdrawAmount,
                    fee: fee, method: selectedMethod.name, type: 'withdraw',
                };
                await database.ref(`users/${user.uid}/transactions/${newTransaction.id}`).set(newTransaction);
                
                const message = `<b>🔴 New Withdrawal Request</b>\n\n` + `<b>User:</b> ${currentUserData.email}\n` + `<b>Amount:</b> $${withdrawAmount.toFixed(2)}\n` + `<b>Method:</b> ${withdrawRequest.method}\n` + `<b>Account:</b> <code>${withdrawRequest.accountId}</code>`;
                await sendTelegramMessage(message);
                
                showNotification('Withdrawal request successful!', 'win');
                passwordConfirmModal.classList.remove('visible');
                withdrawForm.reset();
                showView('transactions');

            } catch (error) {
                console.error("Withdrawal process failed:", error);
                if (error.code === 'auth/wrong-password') {
                    showNotification('Authentication failed. Wrong password.', 'loss');
                } else if (error.message !== "Validation failed") {
                    showNotification('An error occurred during withdrawal.', 'loss');
                }
            } finally {
                passwordConfirmForm.reset();
                submitBtn.disabled = false;
                submitBtn.textContent = 'Authorize';
                appContainer.style.pointerEvents = 'auto';
                appContainer.style.opacity = '1';
            }
        });
        
        function renderTransactionHistory() {
            if (transactionHistory.length === 0) {
                transactionListContainer.innerHTML = `<p>No transactions yet.</p>`; return;
            }
            transactionListContainer.innerHTML = transactionHistory.map(t => { 
                const date = new Date(t.timestamp);
                const formattedDate = `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}, ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
                const amountClass = t.amount > 0 ? 'positive' : 'negative'; const amountPrefix = t.amount > 0 ? '+' : '';
                const transactionId = (t.type === 'deposit' && t.method !== 'P2P Transfer') ? t.id : (t.id.slice(-8).toUpperCase());
                const methodDisplay = t.method === 'P2P Transfer' ? 'P2P (Mentor Sent)' : t.method;
                
                return `<div class="transaction-item"><div class="ti-left"><div class="ti-order-id">ID: ${transactionId}</div><div class="ti-date">${formattedDate}</div><div class="ti-status ti-status-${t.status}">${t.status}</div></div><div class="ti-right"><div class="ti-amount ti-amount-${amountClass}">${amountPrefix}$${Math.abs(t.amount).toFixed(2)}</div><div class="ti-details">${methodDisplay} <span class="ti-type">${t.type}</span></div></div></div>`;
            }).join('');
        }
        
        function initAnalysisPage() { updateAnalysisStats('all'); }
        function updateAnalysisStats(period) {
            const now = Date.now();
            let periodStart = 0;
            if (period === '7d') periodStart = now - 7 * 24 * 60 * 60 * 1000;
            else if (period === '3d') periodStart = now - 3 * 24 * 60 * 60 * 1000;
            else if (period === '1d') periodStart = new Date().setHours(0, 0, 0, 0);

            const filteredHistory = tradeHistory.filter(t => t.timestamp >= periodStart);
            const stats = calculateStats(filteredHistory);

            document.getElementById('analysis-win-rate').textContent = `${stats.winRate.toFixed(1)}%`;
            const pnlElement = document.getElementById('analysis-pnl');
            pnlElement.textContent = `${stats.pnl >= 0 ? '+' : ''}$${stats.pnl.toFixed(2)}`;
            pnlElement.className = `stat-card-value ${stats.pnl >= 0 ? 'profit' : 'loss'}`;
            document.getElementById('analysis-total-trades').textContent = stats.totalTrades;
            document.getElementById('analysis-avg-invest').textContent = `$${stats.avgInvestment.toFixed(2)}`;
        }
        function calculateStats(history) {
            if (history.length === 0) return { winRate: 0, pnl: 0, totalTrades: 0, avgInvestment: 0, wins: 0, losses: 0 };
            const wins = history.filter(t => t.result === 'win').length;
            const losses = history.filter(t => t.result === 'loss').length;
            const totalTrades = history.length;
            const winRate = totalTrades > 0 ? (wins / totalTrades) * 100 : 0;
            const pnl = history.reduce((acc, t) => {
                if (t.result === 'win') return acc + (t.payout - t.amount);
                if (t.result === 'loss') return acc - t.amount;
                return acc;
            }, 0);
            const totalInvestment = history.reduce((acc, t) => acc + t.amount, 0);
            const avgInvestment = totalTrades > 0 ? totalInvestment / totalTrades : 0;
            return { winRate, pnl, totalTrades, avgInvestment, wins, losses };
        }
        
        function calculateRating(winRate, totalTrades) {
            let baseRating = (winRate / 100) * 4; // Max 4 stars from win rate
            let tradeVolumeBonus = Math.min(1, Math.log10(totalTrades + 1) / 2); // Max 1 star from trade volume, logarithmic scale
            let rating = baseRating + tradeVolumeBonus;
            return Math.max(1, Math.min(5, rating)); // Clamp between 1 and 5
        }


        // --- LEADERBOARD LOGIC ---
        const WORLD_NAMES = ["Liam", "Olivia", "Noah", "Emma", "Oliver", "Ava", "Elijah", "Charlotte", "William", "Amelia",
  "James", "Mia", "Benjamin", "Isabella", "Lucas", "Harper", "Henry", "Evelyn", "Alexander", "Sofia",
  "Daniel", "Riley", "Jack", "Layla", "Luke", "Lillian", "David", "Nora", "Caleb", "Ellie",
  "Grayson", "Aaliyah", "Ezra", "Paisley", "Jaxon", "Savannah", "Leo", "Chloe", "Mateo", "Penelope",
  "Aisha", "Ivan", "Toni", "Mei", "Kenji", "Yuki", "Haruto", "Minho", "Jisoo", "Yuna",
  "Akira", "Ren", "Takumi", "Tomoko", "Hana", "Riku", "Daichi", "Sakura", "Kaito", "Hiroshi",
  "Aarav", "Isha", "Priya", "Rohan", "Aditya", "Simran", "Nikita", "Ananya", "Arjun", "Naveen",
  "Chen", "Wei", "Li", "Lan", "Xiao", "Bo", "Yue", "Tian", "Zhang", "Meilin",
  "Thiago", "Beatriz", "Bruno", "Lara", "Felipe", "Carmen", "Diego", "Lucia", "João", "Camila",
  "Pedro", "Mariana", "Gustavo", "Isabela", "Carlos", "Ana", "Julia", "Santiago", "Valentina", "Maria",
  "Amr", "Fatima", "Mohammed", "Omar", "Hassan", "Zainab", "Ali", "Leila", "Samir", "Hiba",
  "Imran", "Tariq", "Amani", "Youssef", "Faisal", "Salma", "Khalid", "Nadia", "Rami", "Noura",
  "Isabelle", "Louis", "Camille", "Gabriel", "Chiara", "Lorenzo", "Giulia", "Anastasia", "Dmitri", "Svetlana",
  "Mikhail", "Andrei", "Irina", "Greta", "Elsa", "Magnus", "Sven", "Hugo", "Mira", "Chiara",
  "Nova", "Kai", "Mina", "John", "Mary", "Jose", "Aiko", "Sana", "Elina", "Zoya"];
        const BOT_BIOS = [
            "Technical analyst with a passion for short-term trends.", "Momentum chaser, riding the waves of the market.",
            "Specializes in support and resistance-based strategies.", "I believe in disciplined trading and strict risk management.",
            "Day trader focusing on high-volume market hours.", "The trend is your friend... until it ends!",
            "Combining fundamental analysis with technical entry points.", "Volatility is opportunity. I thrive in fast-moving markets.",
            "A patient trader waiting for the perfect setup.", "My strategy is built on Fibonacci retracements and extensions."
        ];
        function shuffleArray(array) { for (let i = array.length - 1; i > 0; i--) { const j = Math.floor(Math.random() * (i + 1)); [array[i], array[j]] = [array[j], array[i]]; } return array; }
        
        function initLeaderboardPage() {
            leaderboardLoader.style.display = 'flex'; leaderboardContent.style.display = 'none';
            checkAndSeedLeaderboard().then(() => { listenForLeaderboardUpdates(); });
        }
        
        async function checkAndSeedLeaderboard() {
            const today = new Date().toISOString().slice(0, 10);
            const leaderboardMetaRef = database.ref('leaderboard/meta');
            const snapshot = await leaderboardMetaRef.once('value'); const meta = snapshot.val();
            if (!meta || meta.lastResetDate !== today) {
                console.log("New day detected. Resetting leaderboard.");
                await seedInitialBots(); await leaderboardMetaRef.set({ lastResetDate: today });
                const usersRef = database.ref('users'); const usersSnapshot = await usersRef.once('value');
                if (usersSnapshot.exists()) {
                    const updates = {}; usersSnapshot.forEach(userSnap => { updates[userSnap.key + '/dailyProfit'] = 0; }); await usersRef.update(updates);
                }
            }
        }
        
        function getRandomProfit(min, max) { return Math.random() * (max - min) + min; }
        
        async function seedInitialBots() {
            const shuffledNames = shuffleArray([...WORLD_NAMES]); const leaderboardRef = database.ref('leaderboard/daily');
            const bots = {}; 
            for (let i = 0; i < 60; i++) {
                const botId = `bot_${i}`; let profit;
                if (i < 5) { profit = getRandomProfit(20000, 100000); } 
                else if (i < 20) { profit = getRandomProfit(5000, 25000); } 
                else { profit = getRandomProfit(500, 6000); }
                bots[botId] = { uid: botId, name: shuffledNames[i] || `Trader #${Math.floor(1000 + Math.random() * 9000)}`, profit: parseFloat(profit.toFixed(2)), profilePicUrl: DEFAULT_LOGO_URL, isBot: true };
            }
            await leaderboardRef.set(bots);
        }

        function listenForLeaderboardUpdates() {
            const leaderboardRef = database.ref('leaderboard/daily');
            leaderboardRef.on('value', (snapshot) => {
                if (snapshot.exists() && currentView === 'leaderboard') { 
                    const data = snapshot.val(); 
                    leaderboardDataCache = Object.values(data);
                    renderLeaderboard(leaderboardDataCache); 
                }
            });
            if (leaderboardUpdateInterval) clearInterval(leaderboardUpdateInterval);
            leaderboardUpdateInterval = setInterval(() => {
                database.ref('leaderboard/daily').orderByChild('isBot').equalTo(true).once('value').then(snapshot => {
                    if(!snapshot.exists()) return;
                    const botData = snapshot.val(); const botKeys = Object.keys(botData);
                    if (botKeys.length > 0) {
                        const randomBotKey = botKeys[Math.floor(Math.random() * botKeys.length)]; const botToUpdate = botData[randomBotKey];
                        const profitIncrease = Math.random() * 15; const newProfit = botToUpdate.profit + profitIncrease;
                        database.ref(`leaderboard/daily/${randomBotKey}/profit`).set(parseFloat(newProfit.toFixed(2)));
                    }
                });
            }, 3000); 
        }

        function renderLeaderboard(data) {
            if (!currentUserData) return;
            if(leaderboardLoader.style.display !== 'none') {
                leaderboardLoader.style.display = 'none';
                leaderboardContent.style.display = 'block';
            }
            
            const sortedData = [...data].sort((a, b) => (b.profit || 0) - (a.profit || 0));
            leaderboardDataCache = sortedData; 
            const myId = auth.currentUser.uid;

            let myRank = sortedData.findIndex(u => u.uid === myId);
            let myData;
            if (myRank !== -1) {
                myData = sortedData[myRank];
            } else {
                myData = {
                    profit: currentUserData.dailyProfit || 0,
                    name: currentUserData.name || "Your Name",
                    profilePicUrl: DEFAULT_LOGO_URL
                };
            }
            
            const myNameClass = myRank !== -1 && myRank < 3 ? `rank-${myRank + 1}` : '';
            const myRankClass = myRank !== -1 && myRank < 3 ? `lb-rank-${myRank + 1}` : '';

            leaderboardMyRank.style.display = 'grid';
            const myRankHTML = `
                <div class="lb-pfp">
                     <img src="${DEFAULT_LOGO_URL}" alt="pfp">
                </div>
                <div class="lb-info">
                    <div class="lb-name ${myNameClass}">${myData.name || 'You'}</div>
                    <div class="lb-position">Your position: ${myRank === -1 ? '----' : myRank + 1}</div>
                </div>
                <div class="lb-profit">$${(myData.profit || 0).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</div>
            `;
            leaderboardMyRank.innerHTML = myRankHTML;
            
            leaderboardHelpMyRankDisplay.innerHTML = `<div class="lb-info-block" style="flex-grow: 1;"><span class="lb-rank ${myRankClass}">${myRank === -1 ? '-' : myRank + 1}</span><span class="lb-name ${myNameClass}">${myData.name || 'You'}</span></div><span class="lb-profit">$${(myData.profit || 0).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>`;
            
            const top50 = sortedData.slice(0, 50);
            leaderboardList.innerHTML = '';
            top50.forEach((user, index) => {
                if (!user) return;
                const profitValue = user.profit || 0;
                const nameValue = user.name || 'Trader';
        
                const rank = index + 1;
                const rankClass = rank <= 3 ? `lb-rank-${rank}` : '';
                const nameClass = rank <= 3 ? `lb-name-${rank}` : '';
                const userHtml = `
                    <div class="leaderboard-item" data-uid="${user.uid}">
                        <div class="lb-info-block">
                            <span class="lb-rank ${rankClass}">${rank}</span>
                            <span class="lb-name ${nameClass}">${nameValue}</span>
                        </div>
                        <span class="lb-profit">$${profitValue.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>
                    </div>`;
                leaderboardList.innerHTML += userHtml;
            });
        }
        
        async function showUserProfilePopup(uid) {
            const userData = leaderboardDataCache.find(u => u.uid === uid);
            if (!userData) return;

            document.getElementById('lb-user-profile-name').textContent = userData.name;
            const pfpContainer = document.getElementById('lb-user-profile-pic');
            pfpContainer.innerHTML = `<img src="${DEFAULT_LOGO_URL}" alt="pfp">`;

            let stats;
            let rating = 0;
            if (userData.isBot) {
                const seed = userData.uid.hashCode() + new Date().setHours(0,0,0,0);
                const totalTrades = Math.floor(40 + (seededRandom(seed+1) * 50) + (userData.profit / 250));
                const winRate = 55 + (seededRandom(seed+2) * 20);
                const wins = Math.round(totalTrades * (winRate / 100));
                const losses = totalTrades - wins;
                stats = { totalTrades, winRate, wins, losses };
                rating = calculateRating(winRate, totalTrades);
                document.getElementById('lb-user-bio-text').textContent = BOT_BIOS[Math.floor(seededRandom(seed+4) * BOT_BIOS.length)];
            } else {
                const todayStart = new Date().setHours(0, 0, 0, 0);
                const todayTrades = tradeHistory.filter(t => t.timestamp >= todayStart);
                stats = calculateStats(todayTrades);
                rating = calculateRating(stats.winRate, stats.totalTrades);
                document.getElementById('lb-user-bio-text').textContent = "A dedicated ICTEX trader focused on market analysis.";
            }

            document.getElementById('lb-user-stat-trades').textContent = stats.totalTrades;
            document.getElementById('lb-user-stat-winrate').textContent = `${stats.winRate.toFixed(1)}%`;
            document.getElementById('lb-user-stat-rating').innerHTML = `${rating.toFixed(1)} <svg xmlns="http://www.w3.org/2000/svg" style="width:1em; height:1em; vertical-align:-0.1em;" viewBox="0 0 24 24"><path fill="currentColor" d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2L9.19 8.63L2 9.24l5.46 4.73L5.82 21z"/></svg>`;
            document.getElementById('lb-user-stat-wins').textContent = stats.wins;
            document.getElementById('lb-user-stat-losses').textContent = stats.losses;
            
            leaderboardUserProfileModal.classList.add('visible');
        }

        async function updateUserDailyProfit(profitChange) {
            const user = auth.currentUser; if (!user) return;
            const userRef = database.ref(`users/${user.uid}/dailyProfit`); const leaderboardUserRef = database.ref(`leaderboard/daily/${user.uid}`);
            const { committed, snapshot } = await userRef.transaction(currentProfit => { return (currentProfit || 0) + profitChange; });
            if (committed) {
                const newDailyProfit = snapshot.val();
                await leaderboardUserRef.set({ uid: user.uid, name: currentUserData.name || 'Trader', profit: newDailyProfit, profilePicUrl: DEFAULT_LOGO_URL, isBot: false });
            }
        }
        
        function seededRandom(seed) { let x = Math.sin(seed) * 10000; return x - Math.floor(x); }
        
        function createCandleWithPath(candleData) {
            const { open, high, low, close, timestamp } = candleData;
            const path = [];
            let currentPrice = open;
            const candleVolatility = Math.abs(high - low);
            const pathSteps = CANDLE_PATH_STEPS;
            const pullFactor = 0.0035; 
            const maxPullInfluence = candleVolatility * 0.1;

            for (let i = 0; i < pathSteps; i++) {
                const randomShock = (seededRandom(timestamp + i) - 0.5);
                let changeComponentRandom = randomShock * (candleVolatility * 0.12);
                const pullForce = (close - currentPrice) * pullFactor;
                let totalChange = changeComponentRandom + pullForce;
                if (Math.abs(pullForce) > maxPullInfluence) {
                    totalChange = changeComponentRandom + (pullForce > 0 ? maxPullInfluence : -maxPullInfluence);
                }
                currentPrice += totalChange;
                if (currentPrice > high) currentPrice = high;
                if (currentPrice < low) currentPrice = low;
                path.push(currentPrice);
            }
            path[path.length - 1] = close;
            return { open, high, low, close, path, timestamp };
        }

        async function generateCandleData(timestamp, timeframe, prevCloseOverride = null) {
            const ts = Math.floor(timestamp / (timeframe * 1000)) * timeframe * 1000;
            const marketSeed = currentMarket.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
            const basePrice = prevCloseOverride || (historicalData.length > 0 ? historicalData[historicalData.length - 1].close : 1.15500);
            
            let dynamicVolatility;
            const recentCandles = historicalData.slice(-10);
            if (recentCandles.length > 5) {
                const totalVolatility = recentCandles.reduce((acc, c) => acc + (c.high - c.low), 0);
                dynamicVolatility = totalVolatility / recentCandles.length;
            } else { dynamicVolatility = basePrice * 0.0005; }
            if (dynamicVolatility < basePrice * 0.0001) { dynamicVolatility = basePrice * 0.0001; }

            const candleDate = new Date(ts);
            const candleHour = candleDate.getUTCHours(); 
            const candleMinute = candleDate.getUTCMinutes();

            const specialMinutes = { 8: 'RED', 20: 'GREEN', 32: 'RED', 44: 'RED', 55: 'GREEN', 58: 'GREEN', 0: 'RED' };
            if (specialMinutes.hasOwnProperty(candleMinute)) {
                const isPatternInverted = candleHour % 2 !== 0;
                const baseColor = specialMinutes[candleMinute];
                const finalColor = isPatternInverted ? (baseColor === 'RED' ? 'GREEN' : 'RED') : baseColor;
                const open = basePrice;
                const bodySize = dynamicVolatility * (0.3 + seededRandom(ts) * 0.4);
                const close = finalColor === 'GREEN' ? open + bodySize : open - bodySize;
                let high, low;
                if (finalColor === 'GREEN') {
                    high = close + (dynamicVolatility * (0.1 + seededRandom(ts + 1) * 0.2));
                    low = open - (dynamicVolatility * (0.1 + seededRandom(ts + 2) * 0.2));
                } else {
                    high = open + (dynamicVolatility * (0.1 + seededRandom(ts + 1) * 0.2));
                    low = close - (dynamicVolatility * (0.1 + seededRandom(ts + 2) * 0.2));
                }
                return createCandleWithPath({ open, high, low, close, timestamp: ts });
            }

            let open = basePrice;
            const gapChance = seededRandom(ts + marketSeed + 1);
            if (gapChance < 0.05) {
                const gapDirection = seededRandom(ts + marketSeed + 2) > 0.5 ? 1 : -1;
                const gapSize = basePrice * (0.00015 + seededRandom(ts + marketSeed + 3) * 0.0003);
                open = basePrice + (gapSize * gapDirection);
            }
            
            let momentumBias = 0;
            const expiringBets = myActiveBets.filter(bet => bet.expiryTimestamp > ts && bet.expiryTimestamp <= (ts + timeframe * 1000));
            if (expiringBets.length > 0) {
                const largeBetThreshold = 20;
                const largestBet = expiringBets.sort((a, b) => b.amount - a.amount)[0];

                if (largestBet.amount >= largeBetThreshold) {
                    if (seededRandom(largestBet.id.hashCode() + ts) > 0.25) { 
                        momentumBias = (largestBet.direction === 'UP' ? -0.3 : 0.3);
                    }
                } else {
                    const totalUpAmount = expiringBets.reduce((sum, bet) => bet.direction === 'UP' ? sum + bet.amount : sum, 0);
                    const totalDownAmount = expiringBets.reduce((sum, bet) => bet.direction === 'DOWN' ? sum + bet.amount : sum, 0);
                    const netVolume = totalUpAmount - totalDownAmount;
                    if (Math.abs(netVolume) > 10) {
                        if(seededRandom(ts) > 0.4) {
                             momentumBias = (netVolume > 0 ? -0.15 : 0.15);
                        }
                    }
                }
            }

            const period = Math.floor(ts / (timeframe * 1000));
            let currentPrice = open; const path = [open]; let momentum = (seededRandom(period * 10 + marketSeed) - 0.5) * 0.25;
            const volatilityFactor = (0.8 + seededRandom(period * 20 + marketSeed) * 1.5);
            for (let i = 1; i <= CANDLE_PATH_STEPS; i++) {
                const stepSeed = period * 1000 + i; const randomShock = (seededRandom(stepSeed) - 0.5);
                momentum += (seededRandom(stepSeed + 1) - 0.5) * 0.1; momentum *= 0.95;
                const change = (randomShock + (momentum + momentumBias)) * (0.00002 * volatilityFactor) * Math.sqrt(timeframe);
                currentPrice *= (1 + change); path.push(currentPrice);
            }
            return { open, high: Math.max(...path), low: Math.min(...path), close: currentPrice, path, timestamp: ts };
        }
        
        function getLiveCandleState(candle) {
            if (!candle || !candle.path || candle.path.length === 0) return null;
            const now = Date.now();
            const timeElapsed = now - candle.timestamp;
            const progress = Math.min(timeElapsed / (chartTimeframe * 1000), 1);
            const pathIndex = Math.floor(progress * (candle.path.length - 1));
            const liveClose = candle.path[pathIndex];
            const currentPath = candle.path.slice(0, pathIndex + 1);
            return { ...candle, close: liveClose, high: Math.max(...currentPath), low: Math.min(...currentPath) };
        }

        async function resolveExpiredBets(now, liveCandle) {
            const betsToExpire = myActiveBets.filter(bet => now >= bet.expiryTimestamp);
            if (betsToExpire.length === 0) return;
            myActiveBets = myActiveBets.filter(bet => now < bet.expiryTimestamp);
            const user = auth.currentUser;
            if (!user) return;

            betsToExpire.forEach(async (bet) => {
                let closingPrice = liveCandle.close;
                const closingCandle = historicalData.find(c => c.timestamp + (chartTimeframe * 1000) > bet.expiryTimestamp);
                if (closingCandle && closingCandle.timestamp < liveCandle.timestamp) {
                    closingPrice = closingCandle.close;
                }

                let result, payout, profitChange, message, messageClass;
                const isPush = closingPrice.toFixed(5) === bet.openPrice.toFixed(5);
                const isWin = !isPush && ((closingPrice > bet.openPrice && bet.direction === 'UP') || (closingPrice < bet.openPrice && bet.direction === 'DOWN'));
                
                if (isPush) {
                    result = 'push'; 
                    payout = bet.amount; 
                    profitChange = 0; 
                    updateBalances({ realChange: bet.realAmount, bonusChange: bet.bonusAmount });
                    message = `PUSH! $${bet.amount.toFixed(2)} refunded.`; 
                    messageClass = 'info';
                } else if (isWin) {
                    result = 'win'; 
                    payout = bet.amount * PAYOUT_RATE; 
                    profitChange = payout - bet.amount; 
                    updateBalances({ realChange: payout });
                    message = `WIN! +$${profitChange.toFixed(2)}`; 
                    messageClass = 'win';
                } else {
                    result = 'loss'; 
                    payout = 0; 
                    profitChange = -bet.amount;
                    message = `LOSS -$${bet.amount.toFixed(2)}`; 
                    messageClass = 'loss';
                }
                
                showNotification(message, messageClass);
                updateUserDailyProfit(profitChange);
                
                const historyEntry = { 
                    market: currentMarket, direction: bet.direction, openPrice: bet.openPrice, closePrice: closingPrice, 
                    amount: bet.amount, payout: payout, result: result, timestamp: bet.expiryTimestamp 
                };
                
                await database.ref(`users/${user.uid}/tradeHistory`).push(historyEntry);
                await database.ref(`users/${user.uid}/activeTrades/${bet.id}`).remove();
                
                if (currentView === 'analysis') {
                    const activeFilter = document.querySelector('.analysis-filters .filter-btn.active');
                    updateAnalysisStats(activeFilter ? activeFilter.dataset.period : 'all');
                }
            });
        }

        async function gameLoop(currentTime) {
            animationFrameId = requestAnimationFrame(gameLoop);
            if (document.hidden || currentView !== 'chart' || !canvas.width || !canvas.height || isSyncing) return;
            const now = Date.now();
            if (currentTime - lastFrameTime < 30) return;
            lastFrameTime = currentTime;
            updateExpiryDisplay();
            if (historicalData.length === 0) {
                drawChartLoadingMessage("Loading chart data...");
                return;
            }

            const currentPeriodStart = Math.floor(now / (chartTimeframe * 1000)) * (chartTimeframe * 1000);
            const lastKnownCandle = historicalData[historicalData.length - 1];

            if (lastKnownCandle.timestamp < currentPeriodStart) {
                await forceChartSync();
                return; 
            }
            
            const liveCandle = getLiveCandleState(lastKnownCandle);
            if (liveCandle) {
                resolveExpiredBets(now, liveCandle);
                drawChart(liveCandle);
            }
        }
        
        function handleBet(direction) {
            if (isNaN(investmentAmount) || investmentAmount <= 0 || investmentAmount > balance) {
                showNotification('Invalid amount or insufficient total balance.', 'loss'); 
                return;
            }
            const user = auth.currentUser;
            if (!user) {
                showNotification('You must be logged in to trade.', 'loss');
                return;
            }
            
            let realDeduction = 0;
            let bonusDeduction = 0;
            
            if (investmentAmount <= realBalance) {
                realDeduction = investmentAmount;
            } else {
                realDeduction = realBalance;
                bonusDeduction = investmentAmount - realBalance;
            }

            updateBalances({ realChange: -realDeduction, bonusChange: -bonusDeduction });

            const liveCandle = getLiveCandleState(historicalData[historicalData.length - 1]);
            if (!liveCandle) {
                showNotification('Chart is not ready. Please wait a moment.', 'info');
                updateBalances({ realChange: realDeduction, bonusChange: bonusDeduction });
                return;
            }
            const expiryTimestamp = Date.now() + selectedTimerDuration * 1000;
            
            const activeTradesRef = database.ref(`users/${user.uid}/activeTrades`);
            const newBetRef = activeTradesRef.push();

            const betData = { 
                id: newBetRef.key, 
                amount: investmentAmount,
                realAmount: realDeduction,
                bonusAmount: bonusDeduction,
                direction, openPrice: liveCandle.close, 
                expiryTimestamp, entryCandleIndex: historicalData.length - 1 
            };

            newBetRef.set(betData).catch(error => {
                console.error("Failed to save bet:", error);
                showNotification('Failed to place trade. Please try again.', 'loss');
                updateBalances({ realChange: realDeduction, bonusChange: bonusDeduction });
            });
        }

        function renderTradeHistory() {
            if (tradeHistory.length === 0) { historyListContainer.innerHTML = `<p>You have no trade history yet.</p>`; return; }
            historyListContainer.innerHTML = tradeHistory.map(entry => {
                const resultClass = `hi-result-${entry.result}`, directionClass = `hi-direction-${entry.direction.toLowerCase()}`;
                const resultText = entry.result.toUpperCase(); let payoutText = '';
                if (entry.result === 'win') payoutText = `+${(entry.payout - entry.amount).toFixed(2)}`;
                else if (entry.result === 'loss') payoutText = `-${entry.amount.toFixed(2)}`; else payoutText = `$0.00`;
                return `<div class="history-item"><div class="hi-left"><div class="hi-top-row"><div class="hi-direction ${directionClass}">${entry.direction}</div><div class="hi-asset">${entry.market}</div></div><div class="hi-bottom-row"><div class="hi-prices"> O: <span>${entry.openPrice.toFixed(5)}</span> C: <span>${entry.closePrice.toFixed(5)}</span> </div><div>${new Date(entry.timestamp).toLocaleString()}</div></div></div><div class="hi-right"><div class="hi-result ${resultClass}">${resultText}</div><div class="hi-payout"><span class="hi-payout-val ${resultClass}">${payoutText}</span></div></div></div>`;
            }).join('');
        }
        function formatTimeShort(s) {const m=Math.floor(s/60),c=s%60;return `${String(m).padStart(2,'0')}:${String(c).padStart(2,'0')}`}
        function updateInvestmentDisplay() {amountDisplay.textContent = `$ ${investmentAmount.toFixed(2)}`; payoutAmount.textContent = `$${(investmentAmount*PAYOUT_RATE).toFixed(2)}`;}
        function changeChartTimeframe(newTimeframe, reinitialize = true){let t;if(newTimeframe<60)t=`${newTimeframe}s`;else if(newTimeframe<3600)t=`${newTimeframe/60}m`;else t=`${newTimeframe/3600}h`;showNotification(`Chart set to ${t}`,'info');chartTimeframe=newTimeframe;myActiveBets=[];historicalData=[];chartTimeframeBtn.textContent=t.toUpperCase(); if(auth.currentUser) localStorage.setItem(`chartTimeframe_${auth.currentUser.uid}`, newTimeframe); if(reinitialize) { initializeChartData(); }}
        function updateExpiryDisplay() { betExpiryBtn.textContent = formatTimeShort(selectedTimerDuration); }
        function drawChartLoadingMessage(message) {
            if (!ctx || !canvas.width) return;
            ctx.clearRect(0, 0, canvasWidth, canvasHeight);
            ctx.fillStyle = 'var(--text-secondary)';
            ctx.font = '14px Roboto';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(message, canvasWidth / 2, canvasHeight / 2);
        }
        function drawChart(liveCandle){if(!ctx)return;const chartDrawWidth=canvasWidth-RIGHT_PADDING;ctx.clearRect(0,0,canvasWidth,canvasHeight);const sliceEnd=historicalData.length-viewOffset;const sliceStart=Math.max(0,sliceEnd-visibleCandles);let vC=historicalData.slice(sliceStart,sliceEnd);if(viewOffset===0&&liveCandle){vC=[...vC.slice(0,-1),liveCandle];}let minP=Infinity,maxP=-Infinity;vC.forEach(c=>{if(c){minP=Math.min(minP,c.low);maxP=Math.max(maxP,c.high);}});myActiveBets.forEach(b=>{minP=Math.min(minP,b.openPrice);maxP=Math.max(maxP,b.openPrice);});const pR=maxP-minP||1;const centerPrice=minP+pR/2;const newPriceRange=pR*verticalZoomFactor;minP=centerPrice-newPriceRange/2;maxP=centerPrice+newPriceRange/2;const totalCandleSlots=vC.length+(viewOffset===0?FUTURE_SPACE_CANDLES:0);const cW=chartDrawWidth/totalCandleSlots;const cS=cW*0.2;drawGrid(minP,maxP,chartDrawWidth,vC,cW);vC.forEach((c,i)=>{if(c){const x=i*cW;drawCandle(c,x,cW,cS,minP,maxP);}});myActiveBets.forEach(bet=>{drawActiveTradeIndicator(bet,minP,maxP,chartDrawWidth);if(bet.entryCandleIndex>=sliceStart&&bet.entryCandleIndex<sliceEnd){const entryCandle=historicalData[bet.entryCandleIndex];const candleIndexOnScreen=bet.entryCandleIndex-sliceStart;const xPos=candleIndexOnScreen*cW+cW/2;drawFloatingBetInfo(bet,entryCandle,xPos,minP,maxP);}});if(viewOffset===0&&liveCandle){const currentCandleIndex=vC.length-1;const xPos=currentCandleIndex*cW+(cW/2);drawCandleEndTimer(liveCandle,xPos,minP,maxP);}if(liveCandle)drawCurrentPriceLine(liveCandle.close,minP,maxP,chartDrawWidth);}
        function resizeCanvas(){if(currentView !== 'chart' || !mainAppWrapper.style.display || mainAppWrapper.style.display === 'none') return; canvasWidth=canvas.clientWidth;canvasHeight=canvas.clientHeight;canvas.width=canvasWidth*devicePixelRatio;canvas.height=canvasHeight*devicePixelRatio;ctx.scale(devicePixelRatio,devicePixelRatio);}
        function drawCandle(c,x,w,s,minP,maxP){const yO=((maxP-c.open)/(maxP-minP))*canvasHeight,yC=((maxP-c.close)/(maxP-minP))*canvasHeight,yH=((maxP-c.high)/(maxP-minP))*canvasHeight,yL=((maxP-c.low)/(maxP-minP))*canvasHeight;const color=c.close>=c.open?COLOR_UP:COLOR_DOWN;ctx.fillStyle=color;ctx.strokeStyle=color;ctx.lineWidth=1.8;ctx.beginPath();ctx.moveTo(x+w/2,yH);ctx.lineTo(x+w/2,yL);ctx.stroke();ctx.fillRect(x+s/2,Math.min(yO,yC),w-s,Math.max(1,Math.abs(yO-yC)));}
        function drawGrid(minP, maxP, chartDrawWidth, visibleCandles, candleWidth) { const priceGridLines = 6; ctx.strokeStyle = COLOR_GRID; ctx.fillStyle = COLOR_GRID_TEXT; ctx.font = '10px Roboto'; ctx.textAlign = 'right'; ctx.textBaseline = 'alphabetic'; for (let i = 0; i <= priceGridLines; i++) { const y = (i / priceGridLines) * canvasHeight; const p = maxP - (i / priceGridLines) * (maxP - minP); ctx.beginPath(); ctx.moveTo(0, y); ctx.lineTo(canvasWidth, y); ctx.stroke(); if (y < canvasHeight - 15 && y > 10) { ctx.fillText(p.toFixed(5), canvasWidth - 5, y - 4); } } ctx.strokeStyle = 'rgba(138, 142, 151, 0.15)'; ctx.fillStyle = COLOR_GRID_TEXT; ctx.textAlign = 'center'; visibleCandles.forEach((candle, i) => { if (!candle) return; const date = new Date(candle.timestamp); if (date.getMinutes() % 5 === 0 && date.getSeconds() === 0) { const x = i * candleWidth + (candleWidth / 2); if (x > 0 && x < chartDrawWidth) { ctx.beginPath(); ctx.moveTo(x, 0); ctx.lineTo(x, canvasHeight - 15); ctx.stroke(); const hours = String(date.getHours()).padStart(2, '0'); const minutes = String(date.getMinutes()).padStart(2, '0'); const timeText = `${hours}:${minutes}`; ctx.textBaseline = 'bottom'; ctx.fillText(timeText, x, canvasHeight - 2); } } }); ctx.textAlign = 'right'; ctx.textBaseline = 'alphabetic'; }
        function drawCurrentPriceLine(p, minP, maxP, chartDrawWidth) {const yC = ((maxP - p) / (maxP - minP)) * canvasHeight; ctx.strokeStyle='rgba(255,255,255,0.5)';ctx.lineWidth=1;ctx.setLineDash([4,4]);ctx.beginPath();ctx.moveTo(0,yC);ctx.lineTo(canvasWidth,yC);ctx.stroke();ctx.setLineDash([]);const lastCandle = historicalData.length>1?historicalData[historicalData.length-2]:{close:p};const color=p>=lastCandle.close?COLOR_UP:COLOR_DOWN;const priceText=p.toFixed(5);ctx.font='bold 10px Roboto';const textMetrics=ctx.measureText(priceText);const tagWidth=textMetrics.width+10;const tagHeight=18;const tagX=canvasWidth-tagWidth;const tagY=yC-tagHeight/2;ctx.fillStyle=color;ctx.fillRect(tagX,tagY,tagWidth,tagHeight);ctx.fillStyle='#FFF';ctx.textAlign='center';ctx.textBaseline='middle';ctx.fillText(priceText,tagX+tagWidth/2,yC);ctx.textAlign='right';ctx.textBaseline='alphabetic';}
        function drawActiveTradeIndicator(bet, minP, maxP, chartDrawWidth) {const y = ((maxP - bet.openPrice) / (maxP - minP)) * canvasHeight; if (y < 0 || y > canvasHeight) return;const color = bet.direction === 'UP' ? COLOR_UP : COLOR_DOWN; ctx.setLineDash([3, 5]); ctx.strokeStyle = color; ctx.lineWidth = 1.5; ctx.beginPath(); ctx.moveTo(0, y); ctx.lineTo(canvasWidth, y); ctx.stroke(); ctx.setLineDash([]);const priceText = bet.openPrice.toFixed(5); ctx.font = 'bold 10px Roboto'; const tagHeight = 18; const tagWidth = ctx.measureText(priceText).width + 10;ctx.fillStyle = color; ctx.fillRect(0, y - tagHeight / 2, tagWidth, tagHeight); ctx.fillStyle = '#FFF'; ctx.textAlign = 'center'; ctx.textBaseline = 'middle'; ctx.fillText(priceText, tagWidth / 2, y); ctx.textAlign = 'right'; ctx.textBaseline = 'alphabetic';}
        function drawFloatingBetInfo(bet, candle, candleCenterX, minP, maxP) { if(!candle) return; const color = bet.direction === 'UP' ? COLOR_UP : COLOR_DOWN; const tagHeight = 32; let yPos = ((maxP - candle.high) / (maxP - minP)) * canvasHeight - 20;const amountText = `$${bet.amount.toFixed(2)}`; const timeLeft = Math.max(0, Math.round((bet.expiryTimestamp - Date.now()) / 1000));const timerText = formatTimeShort(timeLeft); ctx.font = '10px Roboto';const infoTagWidth = Math.max(ctx.measureText(amountText).width, ctx.measureText(timerText).width) + 20; const startX = candleCenterX - infoTagWidth / 2;if (ctx.roundRect) { ctx.beginPath(); ctx.roundRect(startX, yPos - tagHeight / 2, infoTagWidth, tagHeight, 4); ctx.fillStyle = color; ctx.fill(); } else { ctx.fillStyle = color; ctx.fillRect(startX, yPos - tagHeight / 2, infoTagWidth, tagHeight); }ctx.fillStyle = '#FFF'; ctx.textAlign = 'center'; ctx.textBaseline = 'middle'; ctx.font = 'bold 10px Roboto'; ctx.fillText(amountText, startX + infoTagWidth / 2, yPos - 7);ctx.font = '10px Roboto'; ctx.fillText(timerText, startX + infoTagWidth / 2, yPos + 7); ctx.textAlign = 'right'; ctx.textBaseline = 'alphabetic';}
        function drawCandleEndTimer(candle, x, minP, maxP) {const timeLeft = Math.round(chartTimeframe - ((Date.now() - candle.timestamp) / 1000)); if (timeLeft < 0 || timeLeft >= chartTimeframe) return;const text = `${timeLeft}s`; const yPos = ((maxP - candle.close) / (maxP - minP)) * canvasHeight; ctx.font = 'bold 11px Roboto';const textWidth = ctx.measureText(text).width + 12; const boxHeight = 18;const boxX = x + 15;ctx.fillStyle = 'rgba(42,46,57,0.9)'; ctx.textAlign = 'left'; ctx.textBaseline = 'middle';if (ctx.roundRect) { ctx.beginPath(); ctx.roundRect(boxX, yPos - boxHeight / 2, textWidth, boxHeight, 4); ctx.fill(); } else { ctx.fillRect(boxX, yPos - boxHeight / 2, textWidth, boxHeight); }ctx.fillStyle = '#FFF'; ctx.fillText(text, boxX + 6, yPos); ctx.textAlign = 'right'; ctx.textBaseline = 'alphabetic';}
        
        async function generateAndSaveInitialData() {
            let lastClose = null; const now=Date.now();
            const currentPeriodStart=Math.floor(now/(chartTimeframe*1000))*(chartTimeframe*1000);
            for(let i=120;i>0;i--){
                const timestamp=currentPeriodStart-(i*chartTimeframe*1000);
                const candle = await generateCandleData(timestamp,chartTimeframe,lastClose);
                await candlesRef.child(candle.timestamp).set(candle);
                lastClose=candle.close;
            }
        }
        
        function initializeChartData() {
            if (candlesRef) candlesRef.off();
            historicalData = []; viewOffset = 0; panDragDistance = 0;
            const marketPath = currentMarket.replace(/\s+/g, '-');
            candlesRef = database.ref(`markets/${marketPath}/candles/${chartTimeframe}s`);

            appLoader.style.display = 'flex';
            appLoader.style.opacity = '1';

            candlesRef.orderByKey().limitToLast(120).once('value', snapshot => {
                if (snapshot.exists()) {
                    const data = snapshot.val();
                    historicalData = Object.values(data).sort((a, b) => a.timestamp - b.timestamp);
                    if(animationFrameId) cancelAnimationFrame(animationFrameId);
                    animationFrameId = requestAnimationFrame(gameLoop);
                    resizeCanvas(); 
                    appLoader.style.opacity = '0';
                    setTimeout(() => appLoader.style.display = 'none', 300);
                    listenForNewCandles();
                    forceChartSync();
                } else {
                    generateAndSaveInitialData().then(() => {
                        initializeChartData();
                    });
                }
            }).catch(error => {
                console.error("Initial chart data fetch failed:", error);
                showNotification("Error loading chart.", 'loss');
                drawChartLoadingMessage("Could not connect to the server.");
                appLoader.style.display = 'none';
            });
        }
        
        function listenForNewCandles() {
            const lastKnownTimestamp = historicalData.length > 0 ? historicalData[historicalData.length - 1].timestamp : 0;
            candlesRef.orderByKey().startAt(String(lastKnownTimestamp + 1)).on('child_added', snapshot => {
                const newCandle = snapshot.val();
                if (historicalData.every(c => c.timestamp !== newCandle.timestamp)) {
                    historicalData.push(newCandle);
                    if (historicalData.length > MAX_STORED_CANDLES) {
                        historicalData.shift();
                    }
                }
            });
        }
        
        async function forceChartSync() {
            if (isSyncing || !candlesRef) return;
            isSyncing = true;
            
            try {
                const now = Date.now();
                const lastLocalCandle = historicalData.length > 0 ? historicalData[historicalData.length - 1] : null;
                const lastTimestamp = lastLocalCandle ? lastLocalCandle.timestamp : 0;
                
                const currentPeriodStart = Math.floor(now / (chartTimeframe * 1000)) * (chartTimeframe * 1000);
                const timeDifference = currentPeriodStart - lastTimestamp;

                if (timeDifference >= chartTimeframe * 1000) {
                    const missingPeriods = Math.floor(timeDifference / (chartTimeframe * 1000));
                    console.log(`Chart is behind. Syncing ${missingPeriods} missing candle(s)...`);

                    let nextTimestamp = lastTimestamp + (chartTimeframe * 1000);
                    let lastClose = lastLocalCandle ? lastLocalCandle.close : null;
                    
                    for (let i = 0; i < missingPeriods; i++) {
                        if (document.hidden) break;
                        const newCandle = await generateCandleData(nextTimestamp, chartTimeframe, lastClose);
                        
                        const candleToSaveRef = candlesRef.child(newCandle.timestamp);
                        const { committed, snapshot } = await candleToSaveRef.transaction(currentData => (currentData === null ? newCandle : undefined));
                        
                        if (committed) {
                            lastClose = newCandle.close;
                        } else {
                            const existingCandle = snapshot.val();
                            lastClose = existingCandle.close;
                        }
                        nextTimestamp += (chartTimeframe * 1000);
                    }
                }
            } catch (error) {
                console.error("Chart Sync Error:", error);
            } finally {
                isSyncing = false;
            }
        }
        
        function getPinchDistance(touches) { const dx = touches[0].clientX - touches[1].clientX; const dy = touches[0].clientY - touches[1].clientY; return Math.sqrt(dx * dx + dy * dy); }
        function handlePointerDown(e) {e.preventDefault();if (e.touches && e.touches.length === 2) { isPinching = true; isPanning = false; isScaling = false; initialPinchDistance = getPinchDistance(e.touches); return; }const rect = canvas.getBoundingClientRect(); const x = (e.touches ? e.touches[0].clientX : e.clientX) - rect.left; const y = (e.touches ? e.touches[0].clientY : e.clientY) - rect.top;if (x > canvas.clientWidth - RIGHT_PADDING) { isScaling = true; scaleStartY = y; canvas.style.cursor = 'ns-resize'; } else { isPanning = true; panStartX = x; canvas.style.cursor = 'grabbing'; }}
        function handlePointerUp() { isPanning = false; isScaling = false; isPinching = false; canvas.style.cursor = 'grab'; }
        function handlePointerMove(e) {e.preventDefault();if (isPinching && e.touches && e.touches.length === 2) {const currentPinchDistance = getPinchDistance(e.touches);if (initialPinchDistance > 0) {const zoomRatio = currentPinchDistance / initialPinchDistance;verticalZoomFactor /= zoomRatio; verticalZoomFactor = Math.max(0.2, Math.min(verticalZoomFactor, 5.0));visibleCandles /= zoomRatio; visibleCandles = Math.round(Math.max(5, Math.min(visibleCandles, 150)));initialPinchDistance = currentPinchDistance;}return;}if (isPinching) return;const rect = canvas.getBoundingClientRect(); const x = (e.touches ? e.touches[0].clientX : e.clientX) - rect.left; const y = (e.touches ? e.touches[0].clientY : e.clientY) - rect.top;if(isScaling) { const deltaY = y - scaleStartY; const zoomSensitivity = 0.005; verticalZoomFactor += deltaY * zoomSensitivity; verticalZoomFactor = Math.max(0.2, Math.min(verticalZoomFactor, 5.0)); scaleStartY = y; }if (isPanning) {const deltaX = x - panStartX; panDragDistance += deltaX; panStartX = x; const candleWidthOnScreen = (canvas.clientWidth - RIGHT_PADDING) / visibleCandles;if (Math.abs(panDragDistance) >= candleWidthOnScreen) {const candleShift = Math.floor(panDragDistance / candleWidthOnScreen);viewOffset = Math.max(0, Math.min(viewOffset - candleShift, historicalData.length - visibleCandles)); panDragDistance = 0;}}}
        function populateExpiryModal() {const timerGrid = document.getElementById('expiry-timer-content'); timerGrid.innerHTML = '';const timerOptions = [5, 10, 15, 30, 60, 120, 300, 600, 900, 1800, 3600, 7200];timerOptions.forEach(sec => {const btn = document.createElement('button'); btn.className = 'time-option'; btn.dataset.time = sec;btn.textContent = (sec < 60) ? `00:${String(sec).padStart(2,'0')}` : formatTimeShort(sec); timerGrid.appendChild(btn);});}
        
        function updateBalance() {
            balanceAmountElement.textContent = `$${balance.toFixed(2)}`;
            headerBalanceElement.classList.remove('balance-tier-1', 'balance-tier-2', 'balance-tier-3');
            
            if (balance < 1000) {
                headerBalanceElement.classList.add('balance-tier-1');
                balanceIconElement.innerHTML = iconPlane;
            } else if (balance >= 1000 && balance < 10000) {
                headerBalanceElement.classList.add('balance-tier-2');
                balanceIconElement.innerHTML = iconCrown;
            } else {
                headerBalanceElement.classList.add('balance-tier-3');
                balanceIconElement.innerHTML = iconDiamond;
            }
        }
        
        const paymentMethods = [
            { id: 'bkash', name: 'Bkash', status: 'maintenance', logo: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSZ1N3CouoCkuDUTEq1uLnlF6hKH2E1KQ6kZ1R6YbS-p8qI9LQU99Edk3pY&s=10', details: { type: 'manual', number: '01700000000', instructions: 'Please use the "Send Money" option and enter the exact BDT amount shown.' } },
            { id: 'nagad', name: 'Nagad', status: 'active', logo: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQovGX4BWR7KQrVAOJxjQPR6ZtvAY4dLmbC8VOaj-IXlAKSLTB-u3tvKMW_&s=10', details: { type: 'manual', number: '01752067094', instructions: 'Please use the "Send Money" option and enter the exact BDT amount shown.' } },
            { id: 'binance', name: 'Binance Pay', status: 'active', logo: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTjNWYzZgpl7EWZL2cxbIJUbwZ_XZbhM7oJohmP4oN9vRmMWnZCBBnZiZo&s=10', details: { type: 'qr', qr_image: 'https://firebasestorage.googleapis.com/v0/b/viptask-5c1fc.appspot.com/o/IMG_20250718_222220.png?alt=media&token=cc232bd1-b83e-4945-94b6-074ad4ce17c2', pay_id: '505820464', instructions: 'Scan the QR code with your Binance App or use the Pay ID. Send the exact USD amount.' } },
            { id: 'tether', name: 'USDT (TRC20)', status: 'active', logo: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRQRSJGSSrXoszL7c7QGzKWfXLn3UPQFMAvqfFaiq8xK9-OjDx1MOhJlug&s=10', details: { type: 'address', qr_image: 'https://firebasestorage.googleapis.com/v0/b/viptask-5c1fc.appspot.com/o/IMG_20250719_075955.jpg?alt=media&token=54b586b0-854d-41ac-86ac-0cf4120896ef', address: 'TRWZqTgWSVeBXMPEkhSzcqXyfsnuWW3o6t', instructions: 'Only send USDT on the TRC20 network to this address. Ensure you cover any network fees.' } },
            { id: 'telegram_pay', name: 'Telegram Pay', status: 'active', logo: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTJOISwXgNAD-GnWiVJ6gbGO_eeAEUhYrWFcOrykD-At-3UxY_V31hU_P0&s=10', link: 'https://t.me/ictextelepay_bot' }
        ];
        
        function updatePromoBonusDisplay() {
            const amount = parseFloat(depositAmountInputNew.value) || 0;
            if (currentDepositData.promo && amount > 0) {
                const promo = currentDepositData.promo;
                if (amount >= promo.minDeposit) {
                    let bonus = amount * (promo.bonusPercentage / 100);
                    if (promo.maxBonus) {
                        bonus = Math.min(bonus, promo.maxBonus);
                    }
                    const total = amount + bonus;
                    promoCalculationDisplay.innerHTML = `Bonus: <span style="color:var(--color-up)">$${bonus.toFixed(2)}</span> | Total to Receive: <span style="color:var(--color-up)">$${total.toFixed(2)}</span>`;
                    promoCalculationDisplay.style.display = 'block';
                } else {
                    promoCalculationDisplay.style.display = 'none';
                }
            } else {
                promoCalculationDisplay.style.display = 'none';
            }
        }
        function updatePayableAmount() { const amountUSD = parseFloat(depositAmountInputNew.value); quickAmountButtonsNew.forEach(b => { b.classList.toggle('active', b.dataset.amount === depositAmountInputNew.value); }); updatePromoBonusDisplay(); }
        function initNewDepositPage() { depositAmountInputNew.value = ''; promoCodeInput.value = ''; promoCodeInput.disabled = false; applyPromoBtn.disabled = false; applyPromoBtn.textContent = 'Apply'; promoFeedbackEl.className = 'promo-feedback'; promoFeedbackText.textContent = ''; promoCalculationDisplay.style.display = 'none'; quickAmountButtonsNew.forEach(b => b.classList.remove('active')); updatePayableAmount(); currentDepositData = {}; }
        function handleNewDepositNext() { const amount = parseFloat(depositAmountInputNew.value); if (isNaN(amount) || amount < MIN_DEPOSIT_USD) { showNotification(`Minimum deposit is $${MIN_DEPOSIT_USD}.`, 'loss'); return; } currentDepositData.amountUSD = amount; currentDepositData.amountBDT = amount * DEPOSIT_RATE_BDT; currentDepositData.invoiceId = 'GD' + Date.now().toString().slice(-8).toUpperCase(); renderNewPaymentMethods(); showView('deposit-methods'); }
        
        function renderNewPaymentMethods() {
            paymentMethodGrid.innerHTML = paymentMethods.map(m => {
                const isUnavailable = m.status !== 'active';
                const statusClass = isUnavailable ? m.status.replace('_', '-') : '';
                const baseClass = `payment-method-item ${statusClass}`;
                const content = `${isUnavailable ? `<div class="pm-status-badge pm-status-${statusClass}">${m.status.replace('_',' ')}</div>` : ''}<img src="${m.logo}" alt="${m.name}"><span>${m.name}</span>`;
                if (m.link) {
                    return `<a href="${m.link}" target="_blank" class="${baseClass}">${content}</a>`;
                }
                return `<div class="${baseClass}" data-method-id="${m.id}" ${isUnavailable ? 'aria-disabled="true"' : ''}>${content}</div>`;
            }).join('');
            
            paymentMethodGrid.querySelectorAll('.payment-method-item:not(a):not([aria-disabled="true"])').forEach(item => {
                item.addEventListener('click', (e) => {
                    const methodId = e.currentTarget.dataset.methodId;
                    const selectedMethod = paymentMethods.find(m => m.id === methodId);
                    currentDepositData.method = selectedMethod;
                    renderNewPaymentDetailsPage(selectedMethod);
                    showView('payment-details');
                });
            });
        }

        function createPaymentInfoRow(label, value, copyText) { return ` <div class="payment-address-row-new"> <div class="address-labels-new"> <span>${label}</span> </div> <div class="address-value-wrapper-new"> <span class="address-text-new">${value}</span> <button class="copy-button-new" data-copy-text="${copyText || value}"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/></svg> </button> </div> </div>`; }
        
        function renderNewPaymentDetailsPage(method) {
            stopDepositTimer();
            const isBangladeshiMethod = ['bkash', 'nagad', 'rocket'].includes(method.id);
            let paymentInfoHTML = `<div class="deposit-timer-card"><div class="timer-label">Session expires in</div><div id="deposit-timer-display">${formatTimeShort(DEPOSIT_SESSION_SECONDS)}</div></div>`;
            if (method.details.instructions) {
                paymentInfoHTML += `<div class="payment-instructions-card">${method.details.instructions}</div>`;
            }
            let detailsCardHTML = `<div class="payment-details-card"><div class="payment-details-row"><span class="label">Invoice ID:</span><span class="value">${currentDepositData.invoiceId}</span></div><div class="payment-details-row"><span class="label">Amount (USD):</span><span class="value">$${currentDepositData.amountUSD.toFixed(2)}</span></div>`;
            if (isBangladeshiMethod) {
                detailsCardHTML += `<div class="payment-details-row"><span class="label">Payable Amount:</span><span class="value highlight">৳${currentDepositData.amountBDT.toFixed(2)}</span></div>`;
            }
            detailsCardHTML += `</div>`;
            paymentInfoHTML += detailsCardHTML;
            
            if (method.details.qr_image) {
                paymentInfoHTML += `<img src="${method.details.qr_image}" alt="${method.name} QR Code" class="deposit-qr-code">`;
            }

            if (method.details.number) {
                paymentInfoHTML += createPaymentInfoRow(`${method.name} Number`, method.details.number);
            }
            if (method.details.pay_id) {
                paymentInfoHTML += createPaymentInfoRow(`${method.name} Pay ID`, method.details.pay_id);
            }
            if (method.details.address) {
                paymentInfoHTML += createPaymentInfoRow(`USDT (TRC20) Address`, method.details.address);
            }
            
            paymentInfoHTML += ` <form id="payment-proof-form-new" class="page-form" style="margin-top:20px;"> <div class="deposit-card-new" style="background-color: transparent; border: none; padding: 0; box-shadow: none;"> <h3>Submit Proof</h3> <div class="form-input-group"> <input type="text" id="deposit-tx-id-new" class="form-input" placeholder="Enter Transaction ID (Required)"> </div> <div class="form-input-group" style="margin-top:15px;"> <label for="deposit-screenshot-new" class="proof-upload-label"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="17 8 12 3 7 8"></polyline><line x1="12" y1="3" x2="12" y2="15"></line></svg> <span>Upload Payment Screenshot</span> <span id="deposit-screenshot-name-new" class="file-name">No file chosen</span> </label> <input type="file" id="deposit-screenshot-new" accept="image/*"> </div> <p style="font-size: 0.8rem; color: var(--text-secondary); text-align: center; margin-top: 10px;">Please provide a Transaction ID or a Screenshot.</p> </div> <button type="submit" id="payment-submit-btn-new">I Have Paid, Submit</button> </form>`;
            paymentDetailsContentNew.innerHTML = paymentInfoHTML;
            paymentDetailsContentNew.querySelectorAll('.copy-button-new').forEach(btn => btn.addEventListener('click', (e) => { e.preventDefault(); const textToCopy = e.currentTarget.dataset.copyText; navigator.clipboard.writeText(textToCopy).then(() => showNotification('Copied!', 'info')); }));
            document.getElementById('deposit-screenshot-new').addEventListener('change', (e) => { document.getElementById('deposit-screenshot-name-new').textContent = e.target.files[0]?.name || 'No file chosen'; });
            document.getElementById('payment-proof-form-new').addEventListener('submit', handleNewProofSubmission);
        }

        async function handleNewProofSubmission(e) {
            e.preventDefault(); stopDepositTimer(); const submitBtn = document.getElementById('payment-submit-btn-new'); submitBtn.disabled = true; submitBtn.textContent = 'Submitting...'; const txId = document.getElementById('deposit-tx-id-new').value.trim(); const screenshotFile = document.getElementById('deposit-screenshot-new').files[0]; if (!txId && !screenshotFile) { showNotification('Please provide Transaction ID or Screenshot.', 'loss'); submitBtn.disabled = false; submitBtn.textContent = 'I Have Paid, Submit'; return; } let screenshotUrl = null;
            try {
                if (screenshotFile) { showNotification('Uploading screenshot...', 'info'); const storageRef = storage.ref(`deposit-proofs/${auth.currentUser.uid}/${Date.now()}_${screenshotFile.name}`); const snapshot = await storageRef.put(screenshotFile); screenshotUrl = await snapshot.ref.getDownloadURL(); }
                const depositRequest = { userId: auth.currentUser.uid, userName: currentUserData.name, userEmail: currentUserData.email, invoiceId: currentDepositData.invoiceId, amountUSD: currentDepositData.amountUSD, method: currentDepositData.method.name, txId: txId || null, screenshotUrl: screenshotUrl || null, promoCode: currentDepositData.promoCode || null, status: 'pending', timestamp: firebase.database.ServerValue.TIMESTAMP };
                await database.ref('deposit_requests').push(depositRequest); let message = `<b>✅ New Deposit Request</b>\n\n` + `<b>User:</b> ${currentUserData.email} (ID: ${currentUserData.numericId})\n` + `<b>Invoice ID:</b> <code>${currentDepositData.invoiceId}</code>\n` + `<b>Method:</b> ${currentDepositData.method.name}\n` + `<b>Amount:</b> $${currentDepositData.amountUSD.toFixed(2)}` + (currentDepositData.amountBDT ? ` (৳${currentDepositData.amountBDT.toFixed(2)})` : '') + `\n`; if (txId) { message += `<b>TxID:</b> <code>${txId}</code>\n`; }
                if (currentDepositData.promoCode) { message += `<b>Promo Code:</b> ${currentDepositData.promoCode}\n`; }
                const newTransaction = { id: currentDepositData.invoiceId, timestamp: Date.now(), status: 'pending', amount: currentDepositData.amountUSD, method: currentDepositData.method.name, type: 'deposit', };
                if (auth.currentUser) await database.ref(`users/${auth.currentUser.uid}/transactions/${newTransaction.id}`).set(newTransaction);
                if (screenshotUrl) await sendTelegramPhoto(screenshotUrl, message); else await sendTelegramMessage(message);
                showNotification('Deposit proof submitted for review!', 'win'); showView('transactions');
            } catch (error) { console.error("Submission Error:", error); showNotification('Submission failed: ' + error.message, 'loss'); } finally { submitBtn.disabled = false; submitBtn.textContent = 'I Have Paid, Submit'; }
        }
        function handleApplyPromoCode() { const code = promoCodeInput.value.trim().toUpperCase(); if (!code) return; const promo = promoCodesDB[code]; promoFeedbackEl.classList.add('visible'); if (promo && promo.status === 'active') { currentDepositData.promo = promo; currentDepositData.promoCode = code; promoFeedbackEl.className = 'promo-feedback success visible'; promoFeedbackText.textContent = `Code "${code}" applied! Get ${promo.bonusPercentage}% bonus for deposits over $${promo.minDeposit}.`; promoCodeInput.disabled = true; applyPromoBtn.disabled = true; applyPromoBtn.textContent = 'Applied'; updatePromoBonusDisplay(); } else { promoFeedbackEl.className = 'promo-feedback error visible'; promoFeedbackText.textContent = 'Invalid or expired promo code.'; delete currentDepositData.promo; delete currentDepositData.promoCode; updatePromoBonusDisplay();} }
        function startDepositTimer() { let timeLeft = DEPOSIT_SESSION_SECONDS; const timerDisplay = document.getElementById('deposit-timer-display'); const updateTimer = () => { if (timeLeft <= 0) { stopDepositTimer(); showNotification('Deposit session expired. Please start over.', 'loss'); showView('deposit-new'); return; } timeLeft--; if (timerDisplay) timerDisplay.textContent = formatTimeShort(timeLeft); }; stopDepositTimer(); if (timerDisplay) timerDisplay.textContent = formatTimeShort(timeLeft); depositTimerInterval = setInterval(updateTimer, 1000); }
        function stopDepositTimer() { if (depositTimerInterval) { clearInterval(depositTimerInterval); depositTimerInterval = null; } }

        function listenForTransactionUpdates(uid) {
            const depositRequestsRef = database.ref('deposit_requests').orderByChild('userId').equalTo(uid);
            depositRequestsRef.on('child_changed', (snapshot) => {
                const request = snapshot.val(); if (!request.invoiceId) return;
                const localTx = transactionHistory.find(tx => tx.id === request.invoiceId);
                if (localTx && localTx.status !== request.status) {
                    database.ref(`users/${uid}/transactions/${request.invoiceId}/status`).set(request.status);
                    if (request.status === 'succeeded') {
                        let bonusAmount = 0;
                        if(request.promoCode && promoCodesDB[request.promoCode] && promoCodesDB[request.promoCode].status === 'active') {
                            const promo = promoCodesDB[request.promoCode];
                            if(request.amountUSD >= promo.minDeposit) {
                                bonusAmount = request.amountUSD * (promo.bonusPercentage / 100);
                                if(promo.maxBonus) bonusAmount = Math.min(bonusAmount, promo.maxBonus);
                            }
                        }
                        updateBalances({ realChange: request.amountUSD, bonusChange: bonusAmount });
                        showNotification(`Your deposit of $${request.amountUSD.toFixed(2)} has been approved!`, 'win');
                        if(bonusAmount > 0) showNotification(`You received a bonus of $${bonusAmount.toFixed(2)}!`, 'info');
                    }
                    else if (request.status === 'failed' || request.status === 'rejected') showNotification(`Your deposit of $${request.amountUSD.toFixed(2)} was rejected.`, 'loss');
                }
            });
            const withdrawRequestsRef = database.ref('withdraw_requests').orderByChild('userId').equalTo(uid);
            withdrawRequestsRef.on('child_changed', (snapshot) => {
                const request = snapshot.val(); if (!request.id) return;
                const localTx = transactionHistory.find(tx => tx.id === request.id);
                if (localTx && localTx.status !== request.status) {
                    database.ref(`users/${uid}/transactions/${request.id}/status`).set(request.status);
                    if (request.status === 'succeeded') showNotification(`Your withdrawal of $${request.amount.toFixed(2)} is complete.`, 'win');
                    else if (request.status === 'rejected') {
                        showNotification(`Your withdrawal of $${request.amount.toFixed(2)} was rejected.`, 'loss');
                        const refundAmount = request.amount + (request.fee || 0);
                        updateBalances({ realChange: refundAmount });
                    }
                }
            });
        }

        function initApp(user) {
            const uid = user.uid;

            const promoCodesRef = database.ref('admin/promo_codes');
            promoCodesRef.on('value', (snapshot) => {
                if (snapshot.exists()) {
                    promoCodesDB = snapshot.val();
                    console.log("Promo codes loaded from database.");
                } else {
                    promoCodesDB = {};
                    console.log("No promo codes found in the database.");
                }
            });

            document.getElementById('nav-btn-chart').innerHTML = navIconChart; document.getElementById('nav-btn-history').innerHTML = navIconHistory; document.getElementById('nav-btn-profile').innerHTML = navIconProfile; document.getElementById('nav-btn-leaderboard').innerHTML = navIconLeaderboard; document.getElementById('nav-btn-settings').innerHTML = navIconSettings;
            if (!ctx.roundRect) {CanvasRenderingContext2D.prototype.roundRect=function(x,y,w,h,r){this.beginPath();this.moveTo(x+r,y);this.arcTo(x+w,y,x+w,y+h,r);this.arcTo(x+w,y+h,x,y+h,r);this.arcTo(x,y+h,x,y,r);this.arcTo(x,y,x+w,y,r);this.closePath();return this;}}

            database.ref('users/' + uid).on('value', (snapshot) => {
                if (snapshot.exists()) {
                    currentUserData = snapshot.val(); 
                    currentUserData.uid = uid; 
                    realBalance = currentUserData.realBalance || 0.0;
                    bonusBalance = currentUserData.bonusBalance || 0.0;
                    balance = realBalance + bonusBalance;
                    
                    updateBalance();
                    if (currentUserData.emailVerified !== user.emailVerified) { snapshot.ref.update({ emailVerified: user.emailVerified }); } 
                    else { updateVerificationStatusUI(); if (['profile', 'kyc'].includes(currentView)) initProfilePage(); }
                }
            });

            database.ref(`users/${uid}/activeTrades`).on('value', (snapshot) => {
                myActiveBets = [];
                if (snapshot.exists()) {
                    snapshot.forEach(childSnapshot => {
                        myActiveBets.push(childSnapshot.val());
                    });
                }
            });
            
            database.ref(`users/${uid}/tradeHistory`).on('value', (snapshot) => {
                tradeHistory = [];
                if(snapshot.exists()){
                    const data = snapshot.val();
                    tradeHistory = Object.values(data).sort((a,b) => b.timestamp - a.timestamp);
                }
                if(currentView === 'history') renderTradeHistory();
            });

            database.ref(`users/${uid}/transactions`).on('value', (snapshot) => {
                transactionHistory = [];
                if(snapshot.exists()){
                    const data = snapshot.val();
                    transactionHistory = Object.values(data).sort((a,b) => b.timestamp - a.timestamp);
                }
                if(currentView === 'transactions') renderTransactionHistory();
            });
            
            chartTimeframe = parseInt(localStorage.getItem(`chartTimeframe_${uid}`)) || 60; 
            selectedTimerDuration = parseInt(localStorage.getItem(`selectedTimerDuration_${uid}`)) || 60;
            
            changeChartTimeframe(chartTimeframe, false);
            function updateClock() { const now=new Date();liveClock.textContent=now.toTimeString().slice(0,8); }
            setInterval(updateClock, 1000); updateClock();
            
            updateInvestmentDisplay(); updateExpiryDisplay(); populateWithdrawalMethods(); listenForTransactionUpdates(uid);
            
            window.addEventListener('resize', resizeCanvas);
            document.addEventListener('visibilitychange', () => { 
                if (!document.hidden && currentView === 'chart') {
                    console.log("App became visible. Forcing chart sync...");
                    forceChartSync();
                } else if(document.hidden) {
                    if(animationFrameId) cancelAnimationFrame(animationFrameId);
                }
            });

            if (chartSyncSafetyNet) clearInterval(chartSyncSafetyNet);
            chartSyncSafetyNet = setInterval(() => {
                if (document.hidden || currentView !== 'chart' || isSyncing) return;
                const lastCandle = historicalData.length > 0 ? historicalData[historicalData.length-1] : null;
                if(lastCandle) {
                    const timeSinceLastCandle = Date.now() - (lastCandle.timestamp + chartTimeframe * 1000);
                    if (timeSinceLastCandle > chartTimeframe * 1000) {
                         console.log("Safety net triggered: Chart stalled. Forcing sync.");
                         forceChartSync();
                    }
                }
            }, CHART_SYNC_INTERVAL);
            
            canvas.addEventListener('mousedown', handlePointerDown); canvas.addEventListener('touchstart', handlePointerDown, { passive: false });
            ['mouseup', 'mouseleave', 'touchend', 'touchcancel'].forEach(evt => canvas.addEventListener(evt, handlePointerUp));
            canvas.addEventListener('mousemove', handlePointerMove); canvas.addEventListener('touchmove', handlePointerMove, { passive: false });
            btnUp.addEventListener('click', () => handleBet('UP')); btnDown.addEventListener('click', () => handleBet('DOWN'));
            
            btnPlus.addEventListener('click', () => { 
                investmentAmount = Math.min(balance, investmentAmount + 1); 
                updateInvestmentDisplay(); 
            });
            btnMinus.addEventListener('click', () => { 
                investmentAmount = Math.max(1, investmentAmount - 1); 
                updateInvestmentDisplay(); 
            });

            amountDisplay.addEventListener('click', () => {
                manualAmountInput.value = investmentAmount.toFixed(2);
                investmentAmountModal.classList.add('visible');
                manualAmountInput.focus();
            });
            
            confirmAmountBtn.addEventListener('click', () => {
                const newValueStr = manualAmountInput.value;
                if (newValueStr === null || newValueStr.trim() === '') {
                    investmentAmountModal.classList.remove('visible');
                    return;
                }
                const newAmount = parseFloat(newValueStr);
                if (!isNaN(newAmount) && newAmount > 0) {
                    if (newAmount > balance) {
                        showNotification('Insufficient balance.', 'loss');
                        investmentAmount = balance > 1 ? Math.floor(balance) : balance;
                    } else {
                        investmentAmount = newAmount;
                    }
                    updateInvestmentDisplay();
                } else {
                    showNotification('Invalid amount entered.', 'loss');
                }
                investmentAmountModal.classList.remove('visible');
            });

            function closeAmountModal() {
                investmentAmountModal.classList.remove('visible');
            }

            cancelAmountBtn.addEventListener('click', closeAmountModal);
            investmentAmountModal.addEventListener('click', (e) => {
                if (e.target === investmentAmountModal) {
                    closeAmountModal();
                }
            });

            chartTimeframeBtn.addEventListener('click',()=>chartTimeframeModal.classList.add('visible'));
            chartTimeframeModal.addEventListener('click',(e)=>{if(e.target.classList.contains('time-option')){changeChartTimeframe(parseInt(e.target.dataset.time));}if(e.target.classList.contains('modal-overlay')||e.target.classList.contains('time-option')){chartTimeframeModal.classList.remove('visible');}});
            betExpiryBtn.addEventListener('click', () => { populateExpiryModal(); betExpiryModal.classList.add('visible'); });
            betExpiryModal.addEventListener('click', (e) => {if (e.target.classList.contains('time-option')) {selectedTimerDuration=parseInt(e.target.dataset.time);localStorage.setItem(`selectedTimerDuration_${uid}`,selectedTimerDuration);updateExpiryDisplay();showNotification(`Expiry timer set for ${formatTimeShort(selectedTimerDuration)}`,'info');}if(e.target.classList.contains('modal-overlay')||e.target.classList.contains('time-option')){betExpiryModal.classList.remove('visible');}});
            appNav.addEventListener('click', (e) => { const navBtn = e.target.closest('.nav-btn'); if (navBtn) { showView(navBtn.dataset.view); } });
            settingsGrid.addEventListener('click', (e) => { const item = e.target.closest('.settings-grid-item'); if (item && item.dataset.view) { e.preventDefault(); showView(item.dataset.view); }});
            backBtns.forEach(btn => btn.addEventListener('click', (e) => showView(e.currentTarget.dataset.view)));
            withdrawMethodSelector.addEventListener('click', () => withdrawMethodModal.classList.add('visible'));
            withdrawMethodModal.addEventListener('click', (e) => { if (e.target === withdrawMethodModal) withdrawMethodModal.classList.remove('visible'); });
            passwordConfirmModal.addEventListener('click', (e) => { if(e.target === passwordConfirmModal) passwordConfirmModal.classList.remove('visible'); });
            analysisFilterContainer.addEventListener('click', (e) => { if(e.target.classList.contains('filter-btn')) { document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active')); e.target.classList.add('active'); updateAnalysisStats(e.target.dataset.period); }});
            leaderboardHelpIconBtn.addEventListener('click', () => leaderboardHelpModal.classList.add('visible'));
            leaderboardHelpModal.addEventListener('click', (e) => {if(e.target === leaderboardHelpModal) leaderboardHelpModal.classList.remove('visible');});
            leaderboardList.addEventListener('click', (e) => {
                const item = e.target.closest('.leaderboard-item');
                if (item && item.dataset.uid) {
                    showUserProfilePopup(item.dataset.uid);
                }
            });
            lbUserProfileCloseBtn.addEventListener('click', () => leaderboardUserProfileModal.classList.remove('visible'));
            leaderboardUserProfileModal.addEventListener('click', (e) => { if(e.target === leaderboardUserProfileModal) leaderboardUserProfileModal.classList.remove('visible'); });
            
            depositAmountInputNew.addEventListener('input', updatePayableAmount);
            quickAmountButtonsNew.forEach(btn => { 
                btn.addEventListener('click', (e) => { 
                    quickAmountButtonsNew.forEach(b => b.classList.remove('active')); 
                    e.currentTarget.classList.add('active'); 
                    depositAmountInputNew.value = e.currentTarget.dataset.amount; 
                    updatePayableAmount(); 
                }); 
            });
            depositNextBtnNew.addEventListener('click', handleNewDepositNext);
            applyPromoBtn.addEventListener('click', handleApplyPromoCode);
            
            initializeChartData();
        }
    });
</script>
</body>
</html>
